<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://timpcfan.site/rss.xml" rel="self" type="application/rss+xml"/>
    <title>TrystanLei</title>
    <link>https://timpcfan.site/</link>
    <description>积累点滴，汇聚成溪。</description>
    <language>zh-CN</language>
    <pubDate>Sun, 02 Oct 2022 15:17:01 GMT</pubDate>
    <lastBuildDate>Sun, 02 Oct 2022 15:17:01 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>笔记</category>
    <category>转载</category>
    <category>随笔</category>
    <category>生活</category>
    <item>
      <title>游戏设计</title>
      <link>https://timpcfan.site/life/game/design.html</link>
      <guid>https://timpcfan.site/life/game/design.html</guid>
      <source url="https://timpcfan.site/rss.xml">游戏设计</source>
      <category>笔记</category>
      <pubDate>Sun, 02 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="游戏设计相关资源" tabindex="-1"> 游戏设计相关资源</h2>
<ul>
<li><a href="https://book.leveldesignbook.com/introduction" target="_blank" rel="noopener noreferrer">The Level Design Book</a></li>
</ul>
<div><p>提示</p>
<p><a href="https://weibo.com/u/5724617030" target="_blank" rel="noopener noreferrer">辣子鸡</a>推荐的关卡设计说明书</p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>系统设计入门</title>
      <link>https://timpcfan.site/code/system-design/system-design-primer/</link>
      <guid>https://timpcfan.site/code/system-design/system-design-primer/</guid>
      <source url="https://timpcfan.site/rss.xml">系统设计入门</source>
      <category>转载</category>
      <pubDate>Sun, 02 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="noopener noreferrer">github.com/donnemartin/system-design-primer</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener noreferrer">掘金翻译计划</a></li>
<li>译者：<a href="https://github.com/XatMassacrE" target="_blank" rel="noopener noreferrer">XatMassacrE</a>、<a href="https://github.com/L9m" target="_blank" rel="noopener noreferrer">L9m</a>、<a href="https://github.com/Airmacho" target="_blank" rel="noopener noreferrer">Airmacho</a>、<a href="https://github.com/xiaoyusilen" target="_blank" rel="noopener noreferrer">xiaoyusilen</a>、<a href="https://github.com/jifaxu" target="_blank" rel="noopener noreferrer">jifaxu</a>、<a href="https://github.com/sqrthree" target="_blank" rel="noopener noreferrer">根号三</a></li>
</ul>
</blockquote>
<h1 id="系统设计入门" tabindex="-1"> 系统设计入门</h1>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/4rzy8D.png">
  <i>Content not supported</i>
</p>
<h2 id="目的" tabindex="-1"> 目的</h2>
<blockquote>
<p>学习如何设计大型系统。</p>
<p>为系统设计的面试做准备。</p>
</blockquote>
<h3 id="学习如何设计大型系统" tabindex="-1"> 学习如何设计大型系统</h3>
<p>学习如何设计可扩展的系统将会有助于你成为一个更好的工程师。</p>
<p>系统设计是一个很宽泛的话题。在互联网上，<strong>关于系统设计原则的资源也是多如牛毛。</strong></p>
<p>这个仓库就是这些资源的<strong>组织收集</strong>，它可以帮助你学习如何构建可扩展的系统。</p>
<h3 id="为系统设计的面试做准备" tabindex="-1"> 为系统设计的面试做准备</h3>
<p>在很多科技公司中，除了代码面试，系统设计也是<strong>技术面试过程</strong>中的一个<strong>必要环节</strong>。</p>
<p><strong>实践常见的系统设计面试题</strong>并且把你的答案和<strong>例子的解答</strong>进行<strong>对照</strong>：讨论，代码和图表。</p>
<p>面试准备的其他主题：</p>
<ul>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
</ul>
<h2 id="系统设计主题的索引" tabindex="-1"> 系统设计主题的索引</h2>
<blockquote>
<p>各种系统设计主题的摘要，包括优点和缺点。<strong>每一个主题都面临着取舍和权衡</strong>。</p>
<p>每个章节都包含着更多的资源的链接。</p>
</blockquote>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/trSJRx.png">
  <i>Content not supported</i>
</p>
<h2 id="学习指引" tabindex="-1"> 学习指引</h2>
<blockquote>
<p>基于你面试的时间线（短、中、长）去复习那些推荐的主题。</p>
</blockquote>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/bQjZIt.png" alt="" loading="lazy"></p>
<p><strong>问：对于面试来说，我需要知道这里的所有知识点吗？</strong></p>
<p><strong>答：不，如果只是为了准备面试的话，你并不需要知道所有的知识点。</strong></p>
<p>在一场面试中你会被问到什么取决于下面这些因素：</p>
<ul>
<li>你的经验</li>
<li>你的技术背景</li>
<li>你面试的职位</li>
<li>你面试的公司</li>
<li>运气</li>
</ul>
<p>那些有经验的候选人通常会被期望了解更多的系统设计的知识。架构师或者团队负责人则会被期望了解更多除了个人贡献之外的知识。顶级的科技公司通常也会有一次或者更多的系统设计面试。</p>
<p>面试会很宽泛的展开并在几个领域深入。这会帮助你了解一些关于系统设计的不同的主题。基于你的时间线，经验，面试的职位和面试的公司对下面的指导做出适当的调整。</p>
<ul>
<li><strong>短期</strong> - 以系统设计主题的<strong>广度</strong>为目标。通过解决<strong>一些</strong>面试题来练习。</li>
<li><strong>中期</strong> - 以系统设计主题的<strong>广度</strong>和<strong>初级深度</strong>为目标。通过解决<strong>很多</strong>面试题来练习。</li>
<li><strong>长期</strong> - 以系统设计主题的<strong>广度</strong>和<strong>高级深度</strong>为目标。通过解决<strong>大部分</strong>面试题来练习。</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>短期</th>
<th>中期</th>
<th>长期</th>
</tr>
</thead>
<tbody>
<tr>
<td>阅读  以获得一个关于系统如何工作的宽泛的认识</td>
<td>👍</td>
<td>👍</td>
<td>👍</td>
</tr>
<tr>
<td>阅读一些你要面试的的文章</td>
<td>👍</td>
<td>👍</td>
<td>👍</td>
</tr>
<tr>
<td>阅读 </td>
<td>👍</td>
<td>👍</td>
<td>👍</td>
</tr>
<tr>
<td>复习 </td>
<td>👍</td>
<td>👍</td>
<td>👍</td>
</tr>
<tr>
<td>完成 </td>
<td>一些</td>
<td>很多</td>
<td>大部分</td>
</tr>
<tr>
<td>完成 </td>
<td>一些</td>
<td>很多</td>
<td>大部分</td>
</tr>
<tr>
<td>复习 </td>
<td>一些</td>
<td>很多</td>
<td>大部分</td>
</tr>
</tbody>
</table>
<h2 id="如何处理一个系统设计的面试题" tabindex="-1"> 如何处理一个系统设计的面试题</h2>
<p>系统设计面试是一个<strong>开放式的对话</strong>。他们期望你去主导这个对话。</p>
<p>你可以使用下面的步骤来指引讨论。为了巩固这个过程，请使用下面的步骤完成这个章节。</p>
<h3 id="第一步-描述使用场景-约束和假设" tabindex="-1"> 第一步：描述使用场景，约束和假设</h3>
<p>把所有需要的东西聚集在一起，审视问题。不停的提问，以至于我们可以明确使用场景和约束。讨论假设。</p>
<ul>
<li>谁会使用它？</li>
<li>他们会怎样使用它？</li>
<li>有多少用户？</li>
<li>系统的作用是什么？</li>
<li>系统的输入输出分别是什么？</li>
<li>我们希望处理多少数据？</li>
<li>我们希望每秒钟处理多少请求？</li>
<li>我们希望的读写比率？</li>
</ul>
<h3 id="第二步-创造一个高层级的设计" tabindex="-1"> 第二步：创造一个高层级的设计</h3>
<p>使用所有重要的组件来描绘出一个高层级的设计。</p>
<ul>
<li>画出主要的组件和连接</li>
<li>证明你的想法</li>
</ul>
<h3 id="第三步-设计核心组件" tabindex="-1"> 第三步：设计核心组件</h3>
<p>对每一个核心组件进行详细深入的分析。举例来说，如果你被问到<a href="/code/system-design/system-design-primer/pastebin.html">设计一个 url 缩写服务</a>，开始讨论：</p>
<ul>
<li>生成并储存一个完整 url 的 hash
<ul>
<li><a href="/code/system-design/system-design-primer/pastebin.html">MD5</a> 和 <a href="/code/system-design/system-design-primer/pastebin.html">Base62</a></li>
<li>Hash 碰撞</li>
<li>SQL 还是 NoSQL</li>
<li>数据库模型</li>
</ul>
</li>
<li>将一个 hashed url 翻译成完整的 url
<ul>
<li>数据库查找</li>
</ul>
</li>
<li>API 和面向对象设计</li>
</ul>
<h3 id="第四步-扩展设计" tabindex="-1"> 第四步：扩展设计</h3>
<p>确认和处理瓶颈以及一些限制。举例来说就是你需要下面的这些来完成扩展性的议题吗？</p>
<ul>
<li>负载均衡</li>
<li>水平扩展</li>
<li>缓存</li>
<li>数据库分片</li>
</ul>
<p>论述可能的解决办法和代价。每件事情需要取舍。可以使用来处理瓶颈。</p>
<h3 id="预估计算量" tabindex="-1"> 预估计算量</h3>
<p>你或许会被要求通过手算进行一些估算。涉及到的是下面的这些资源：</p>
<ul>
<li><a href="http://highscalability.com/blog/2011/1/26/google-pro-tip-use-back-of-the-envelope-calculations-to-choo.html" target="_blank" rel="noopener noreferrer">使用预估计算量</a></li>
<li></li>
<li></li>
</ul>
<h3 id="相关资源和延伸阅读" tabindex="-1"> 相关资源和延伸阅读</h3>
<p>查看下面的链接以获得我们期望的更好的想法：</p>
<ul>
<li><a href="https://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/" target="_blank" rel="noopener noreferrer">怎样通过一个系统设计的面试</a></li>
<li><a href="http://www.hiredintech.com/system-design" target="_blank" rel="noopener noreferrer">系统设计的面试</a></li>
<li><a href="https://www.youtube.com/watch?v=ZgdS0EUmn70" target="_blank" rel="noopener noreferrer">系统架构与设计的面试简介</a></li>
</ul>
<h2 id="系统设计的面试题和解答" tabindex="-1"> 系统设计的面试题和解答</h2>
<blockquote>
<p>普通的系统设计面试题和相关事例的论述，代码和图表。</p>
</blockquote>
<blockquote>
<p>与内容有关的解答在 <code>solutions/</code> 文件夹中。</p>
</blockquote>
<table>
<thead>
<tr>
<th>问题</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>设计 Pastebin.com (或者 Bit.ly)</td>
<td><a href="/code/system-design/system-design-primer/pastebin.html">解答</a></td>
</tr>
<tr>
<td>设计 Twitter 时间线和搜索 (或者 Facebook feed 和搜索)</td>
<td><a href="/code/system-design/system-design-primer/twitter.html">解答</a></td>
</tr>
<tr>
<td>设计一个网页爬虫</td>
<td><a href="/code/system-design/system-design-primer/web_crawler.html">解答</a></td>
</tr>
<tr>
<td>设计 Mint.com</td>
<td><a href="/code/system-design/system-design-primer/mint.html">解答</a></td>
</tr>
<tr>
<td>为一个社交网络设计数据结构</td>
<td><a href="/code/system-design/system-design-primer/social_graph.html">解答</a></td>
</tr>
<tr>
<td>为搜索引擎设计一个 key-value 储存</td>
<td><a href="/code/system-design/system-design-primer/query_cache.html">解答</a></td>
</tr>
<tr>
<td>通过分类特性设计 Amazon 的销售排名</td>
<td><a href="/code/system-design/system-design-primer/sales_rank.html">解答</a></td>
</tr>
<tr>
<td>在 AWS 上设计一个百万用户级别的系统</td>
<td><a href="/code/system-design/system-design-primer/scaling_aws.html">解答</a></td>
</tr>
</tbody>
</table>
<h3 id="设计-pastebin-com-或者-bit-ly" tabindex="-1"> 设计 Pastebin.com (或者 Bit.ly)</h3>
<p><a href="/code/system-design/system-design-primer/pastebin.html">查看实践与解答</a></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/gCRLTI.png" alt="" loading="lazy"></p>
<h3 id="设计-twitter-时间线和搜索-或者-facebook-feed-和搜索" tabindex="-1"> 设计 Twitter 时间线和搜索 (或者 Facebook feed 和搜索)</h3>
<p><a href="/code/system-design/system-design-primer/twitter.html">查看实践与解答</a></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/X82Bri.png" alt="" loading="lazy"></p>
<h3 id="设计一个网页爬虫" tabindex="-1"> 设计一个网页爬虫</h3>
<p><a href="/code/system-design/system-design-primer/web_crawler.html">查看实践与解答</a></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/gHJYnF.png" alt="" loading="lazy"></p>
<h3 id="设计-mint-com" tabindex="-1"> 设计 Mint.com</h3>
<p><a href="/code/system-design/system-design-primer/mint.html">查看实践与解答</a></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/8IA620.png" alt="" loading="lazy"></p>
<h3 id="为一个社交网络设计数据结构" tabindex="-1"> 为一个社交网络设计数据结构</h3>
<p><a href="/code/system-design/system-design-primer/social_graph.html">查看实践与解答</a></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/FIuPES.png" alt="" loading="lazy"></p>
<h3 id="为搜索引擎设计一个-key-value-储存" tabindex="-1"> 为搜索引擎设计一个 key-value 储存</h3>
<p><a href="/code/system-design/system-design-primer/query_cache.html">查看实践与解答</a></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/1toaVx.png" alt="" loading="lazy"></p>
<h3 id="设计按类别分类的-amazon-销售排名" tabindex="-1"> 设计按类别分类的 Amazon 销售排名</h3>
<p><a href="/code/system-design/system-design-primer/sales_rank.html">查看实践与解答</a></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/fxgGVS.png" alt="" loading="lazy"></p>
<h3 id="在-aws-上设计一个百万用户级别的系统" tabindex="-1"> 在 AWS 上设计一个百万用户级别的系统</h3>
<p><a href="/code/system-design/system-design-primer/scaling_aws.html">查看实践与解答</a></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/NdAfr9.png" alt="" loading="lazy"></p>
<h2 id="面向对象设计的面试问题及解答" tabindex="-1"> 面向对象设计的面试问题及解答</h2>
<blockquote>
<p>常见面向对象设计面试问题及实例讨论，代码和图表演示。</p>
<p>与内容相关的解决方案在 <code>solutions/</code> 文件夹中。</p>
</blockquote>
<blockquote>
<p><strong>注：此节还在完善中</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>问题</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>设计 hash map</td>
<td><a href="https://github.com/donnemartin/system-design-primer/tree/master/solutions/object_oriented_design/hash_table/hash_map.ipynb" target="_blank" rel="noopener noreferrer">解决方案</a></td>
</tr>
<tr>
<td>设计 LRU 缓存</td>
<td><a href="https://github.com/donnemartin/system-design-primer/tree/master/solutions/object_oriented_design/lru_cache/lru_cache.ipynb" target="_blank" rel="noopener noreferrer">解决方案</a></td>
</tr>
<tr>
<td>设计一个呼叫中心</td>
<td><a href="https://github.com/donnemartin/system-design-primer/tree/master/solutions/object_oriented_design/call_center/call_center.ipynb" target="_blank" rel="noopener noreferrer">解决方案</a></td>
</tr>
<tr>
<td>设计一副牌</td>
<td><a href="https://github.com/donnemartin/system-design-primer/tree/master/solutions/object_oriented_design/deck_of_cards/deck_of_cards.ipynb" target="_blank" rel="noopener noreferrer">解决方案</a></td>
</tr>
<tr>
<td>设计一个停车场</td>
<td><a href="https://github.com/donnemartin/system-design-primer/tree/master/solutions/object_oriented_design/parking_lot/parking_lot.ipynb" target="_blank" rel="noopener noreferrer">解决方案</a></td>
</tr>
<tr>
<td>设计一个聊天服务</td>
<td><a href="https://github.com/donnemartin/system-design-primer/tree/master/solutions/object_oriented_design/online_chat/online_chat.ipynb" target="_blank" rel="noopener noreferrer">解决方案</a></td>
</tr>
<tr>
<td>设计一个环形数组</td>
<td></td>
</tr>
<tr>
<td>添加一个面向对象设计问题</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="系统设计主题-从这里开始" tabindex="-1"> 系统设计主题：从这里开始</h2>
<p>不熟悉系统设计？</p>
<p>首先，你需要对一般性原则有一个基本的认识，知道它们是什么，怎样使用以及利弊。</p>
<h3 id="第一步-回顾可扩展性-scalability-的视频讲座" tabindex="-1"> 第一步：回顾可扩展性（scalability）的视频讲座</h3>
<p><a href="https://www.youtube.com/watch?v=-W9F__D3oY4" target="_blank" rel="noopener noreferrer">哈佛大学可扩展性讲座</a></p>
<ul>
<li>主题涵盖
<ul>
<li>垂直扩展（Vertical scaling）</li>
<li>水平扩展（Horizontal scaling）</li>
<li>缓存</li>
<li>负载均衡</li>
<li>数据库复制</li>
<li>数据库分区</li>
</ul>
</li>
</ul>
<h3 id="第二步-回顾可扩展性文章" tabindex="-1"> 第二步：回顾可扩展性文章</h3>
<p><a href="http://www.lecloud.net/tagged/scalability/chrono" target="_blank" rel="noopener noreferrer">可扩展性</a></p>
<ul>
<li>主题涵盖：
<ul>
<li><a href="http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones" target="_blank" rel="noopener noreferrer">Clones</a></li>
<li><a href="http://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database" target="_blank" rel="noopener noreferrer">数据库</a></li>
<li><a href="http://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache" target="_blank" rel="noopener noreferrer">缓存</a></li>
<li><a href="http://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism" target="_blank" rel="noopener noreferrer">异步</a></li>
</ul>
</li>
</ul>
<h3 id="接下来的步骤" tabindex="-1"> 接下来的步骤</h3>
<p>接下来，我们将看看高阶的权衡和取舍:</p>
<ul>
<li><strong>性能</strong>与<strong>可扩展性</strong></li>
<li><strong>延迟</strong>与<strong>吞吐量</strong></li>
<li><strong>可用性</strong>与<strong>一致性</strong></li>
</ul>
<p>记住<strong>每个方面都面临取舍和权衡</strong>。</p>
<p>然后，我们将深入更具体的主题，如 DNS、CDN 和负载均衡器。</p>
<h2 id="性能与可扩展性" tabindex="-1"> 性能与可扩展性</h2>
<p>如果服务<strong>性能</strong>的增长与资源的增加是成比例的，服务就是可扩展的。通常，提高性能意味着服务于更多的工作单元，另一方面，当数据集增长时，同样也可以处理更大的工作单位。<sup><a href="http://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html">1</a></sup></p>
<p>另一个角度来看待性能与可扩展性:</p>
<ul>
<li>如果你的系统有<strong>性能</strong>问题，对于单个用户来说是缓慢的。</li>
<li>如果你的系统有<strong>可扩展性</strong>问题，单个用户较快但在高负载下会变慢。</li>
</ul>
<h3 id="来源及延伸阅读" tabindex="-1"> 来源及延伸阅读</h3>
<ul>
<li><a href="http://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html" target="_blank" rel="noopener noreferrer">简单谈谈可扩展性</a></li>
<li><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/" target="_blank" rel="noopener noreferrer">可扩展性，可用性，稳定性和模式</a></li>
</ul>
<h2 id="延迟与吞吐量" tabindex="-1"> 延迟与吞吐量</h2>
<p><strong>延迟</strong>是执行操作或运算结果所花费的时间。</p>
<p><strong>吞吐量</strong>是单位时间内（执行）此类操作或运算的数量。</p>
<p>通常，你应该以<strong>可接受级延迟</strong>下<strong>最大化吞吐量</strong>为目标。</p>
<h3 id="来源及延伸阅读-1" tabindex="-1"> 来源及延伸阅读</h3>
<ul>
<li><a href="https://community.cadence.com/cadence_blogs_8/b/sd/archive/2010/09/13/understanding-latency-vs-throughput" target="_blank" rel="noopener noreferrer">理解延迟与吞吐量</a></li>
</ul>
<h2 id="可用性与一致性" tabindex="-1"> 可用性与一致性</h2>
<h3 id="cap-理论" tabindex="-1"> CAP 理论</h3>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/nMNgXq.png">
  <i>Content not supported</i>
  <strong><a href="http://robertgreiner.com/2014/08/cap-theorem-revisited">来源：再看 CAP 理论</a></strong>
</p>
<p>在一个分布式计算系统中，只能同时满足下列的两点:</p>
<ul>
<li><strong>一致性</strong> ─ 每次访问都能获得最新数据但可能会收到错误响应</li>
<li><strong>可用性</strong> ─ 每次访问都能收到非错响应，但不保证获取到最新数据</li>
<li><strong>分区容错性</strong> ─ 在任意分区网络故障的情况下系统仍能继续运行</li>
</ul>
<p><strong>网络并不可靠，所以你应要支持分区容错性，并需要在软件可用性和一致性间做出取舍。</strong></p>
<h4 id="cp-─-一致性和分区容错性" tabindex="-1"> CP ─ 一致性和分区容错性</h4>
<p>等待分区节点的响应可能会导致延时错误。如果你的业务需求需要原子读写，CP 是一个不错的选择。</p>
<h4 id="ap-─-可用性与分区容错性" tabindex="-1"> AP ─ 可用性与分区容错性</h4>
<p>响应节点上可用数据的最近版本可能并不是最新的。当分区解析完后，写入（操作）可能需要一些时间来传播。</p>
<p>如果业务需求允许，或当有外部故障时要求系统继续运行，AP 是一个不错的选择。</p>
<h3 id="来源及延伸阅读-2" tabindex="-1"> 来源及延伸阅读</h3>
<ul>
<li><a href="http://robertgreiner.com/2014/08/cap-theorem-revisited/" target="_blank" rel="noopener noreferrer">再看 CAP 理论</a></li>
<li><a href="http://ksat.me/a-plain-english-introduction-to-cap-theorem/" target="_blank" rel="noopener noreferrer">通俗易懂地介绍 CAP 理论</a></li>
<li><a href="https://github.com/henryr/cap-faq" target="_blank" rel="noopener noreferrer">CAP FAQ</a></li>
</ul>
<h2 id="一致性模式" tabindex="-1"> 一致性模式</h2>
<p>有同一份数据的多份副本，我们面临着怎样同步它们的选择，以便让客户端有一致的显示数据。回想 中的一致性定义 ─ 每次访问都能获得最新数据但可能会收到错误响应</p>
<h3 id="弱一致性" tabindex="-1"> 弱一致性</h3>
<p>在写入之后，访问可能看到，也可能看不到（写入数据）。尽力优化之让其能访问最新数据。</p>
<p>这种方式可以 memcached 等系统中看到。弱一致性在 VoIP，视频聊天和实时多人游戏等真实用例中表现不错。打个比方，如果你在通话中丢失信号几秒钟时间，当重新连接时你是听不到这几秒钟所说的话的。</p>
<h3 id="最终一致性" tabindex="-1"> 最终一致性</h3>
<p>在写入后，访问最终能看到写入数据（通常在数毫秒内）。数据被异步复制。</p>
<p>DNS 和 email 等系统使用的是此种方式。最终一致性在高可用性系统中效果不错。</p>
<h3 id="强一致性" tabindex="-1"> 强一致性</h3>
<p>在写入后，访问立即可见。数据被同步复制。</p>
<p>文件系统和关系型数据库（RDBMS）中使用的是此种方式。强一致性在需要记录的系统中运作良好。</p>
<h3 id="来源及延伸阅读-3" tabindex="-1"> 来源及延伸阅读</h3>
<ul>
<li><a href="http://snarfed.org/transactions_across_datacenters_io.html" target="_blank" rel="noopener noreferrer">Transactions across data centers</a></li>
</ul>
<h2 id="可用性模式" tabindex="-1"> 可用性模式</h2>
<p>有两种支持高可用性的模式: <strong>故障切换（fail-over）<strong>和</strong>复制（replication）</strong>。</p>
<h3 id="故障切换" tabindex="-1"> 故障切换</h3>
<h4 id="工作到备用切换-active-passive" tabindex="-1"> 工作到备用切换（Active-passive）</h4>
<p>关于工作到备用的故障切换流程是，工作服务器发送周期信号给待机中的备用服务器。如果周期信号中断，备用服务器切换成工作服务器的 IP 地址并恢复服务。</p>
<p>宕机时间取决于备用服务器处于“热”待机状态还是需要从“冷”待机状态进行启动。只有工作服务器处理流量。</p>
<p>工作到备用的故障切换也被称为主从切换。</p>
<h4 id="双工作切换-active-active" tabindex="-1"> 双工作切换（Active-active）</h4>
<p>在双工作切换中，双方都在管控流量，在它们之间分散负载。</p>
<p>如果是外网服务器，DNS 将需要对两方都了解。如果是内网服务器，应用程序逻辑将需要对两方都了解。</p>
<p>双工作切换也可以称为主主切换。</p>
<h3 id="缺陷-故障切换" tabindex="-1"> 缺陷：故障切换</h3>
<ul>
<li>故障切换需要添加额外硬件并增加复杂性。</li>
<li>如果新写入数据在能被复制到备用系统之前，工作系统出现了故障，则有可能会丢失数据。</li>
</ul>
<h3 id="复制" tabindex="-1"> 复制</h3>
<h4 id="主-─-从复制和主-─-主复制" tabindex="-1"> 主 ─ 从复制和主 ─ 主复制</h4>
<p>这个主题进一步探讨了部分:</p>
<ul>
<li></li>
<li></li>
</ul>
<h2 id="域名系统" tabindex="-1"> 域名系统</h2>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/GosmRV.jpg">
  <i>Content not supported</i>
  <strong><a href="http://www.slideshare.net/srikrupa5/dns-security-presentation-issa">来源：DNS 安全介绍</a></strong>
</p>
<p>域名系统是把 www.example.com 等域名转换成 IP 地址。</p>
<p>域名系统是分层次的，一些 DNS 服务器位于顶层。当查询（域名） IP 时，路由或 ISP 提供连接 DNS 服务器的信息。较底层的 DNS 服务器缓存映射，它可能会因为 DNS 传播延时而失效。DNS 结果可以缓存在浏览器或操作系统中一段时间，时间长短取决于<a href="https://en.wikipedia.org/wiki/Time_to_live" target="_blank" rel="noopener noreferrer">存活时间 TTL</a>。</p>
<ul>
<li><strong>NS 记录（域名服务）</strong> ─ 指定解析域名或子域名的 DNS 服务器。</li>
<li><strong>MX 记录（邮件交换）</strong> ─ 指定接收信息的邮件服务器。</li>
<li><strong>A 记录（地址）</strong> ─ 指定域名对应的 IP 地址记录。</li>
<li><strong>CNAME（规范）</strong> ─ 一个域名映射到另一个域名或 <code>CNAME</code> 记录（ example.com 指向 www.example.com ）或映射到一个 <code>A</code> 记录。</li>
</ul>
<p><a href="https://www.cloudflare.com/dns/" target="_blank" rel="noopener noreferrer">CloudFlare</a> 和 <a href="https://aws.amazon.com/route53/" target="_blank" rel="noopener noreferrer">Route 53</a> 等平台提供管理 DNS 的功能。某些 DNS 服务通过集中方式来路由流量:</p>
<ul>
<li><a href="http://g33kinfo.com/info/archives/2657" target="_blank" rel="noopener noreferrer">加权轮询调度</a>
<ul>
<li>防止流量进入维护中的服务器</li>
<li>在不同大小集群间负载均衡</li>
<li>A/B 测试</li>
</ul>
</li>
<li>基于延迟路由</li>
<li>基于地理位置路由</li>
</ul>
<h3 id="缺陷-dns" tabindex="-1"> 缺陷:DNS</h3>
<ul>
<li>虽说缓存可以减轻 DNS 延迟，但连接 DNS 服务器还是带来了轻微的延迟。</li>
<li>虽然它们通常由<a href="http://superuser.com/questions/472695/who-controls-the-dns-servers/472729" target="_blank" rel="noopener noreferrer">政府，网络服务提供商和大公司</a>管理，但 DNS 服务管理仍可能是复杂的。</li>
<li>DNS 服务最近遭受 <a href="http://dyn.com/blog/dyn-analysis-summary-of-friday-october-21-attack/" target="_blank" rel="noopener noreferrer">DDoS 攻击</a>，阻止不知道 Twitter IP 地址的用户访问 Twitter。</li>
</ul>
<h3 id="来源及延伸阅读-4" tabindex="-1"> 来源及延伸阅读</h3>
<ul>
<li><a href="https://technet.microsoft.com/en-us/library/dd197427(v=ws.10).aspx" target="_blank" rel="noopener noreferrer">DNS 架构</a></li>
<li><a href="https://en.wikipedia.org/wiki/Domain_Name_System" target="_blank" rel="noopener noreferrer">Wikipedia</a></li>
<li><a href="https://support.dnsimple.com/categories/dns/" target="_blank" rel="noopener noreferrer">关于 DNS 的文章</a></li>
</ul>
<h2 id="内容分发网络-cdn" tabindex="-1"> 内容分发网络（CDN）</h2>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/IPEWdV.jpg">
  <i>Content not supported</i>
  <strong><a href="https://www.creative-artworks.eu/why-use-a-content-delivery-network-cdn/">来源：为什么使用 CDN</a></strong>
</p>
<p>内容分发网络（CDN）是一个全球性的代理服务器分布式网络，它从靠近用户的位置提供内容。通常，HTML/CSS/JS，图片和视频等静态内容由 CDN 提供，虽然亚马逊 CloudFront 等也支持动态内容。CDN 的 DNS 解析会告知客户端连接哪台服务器。</p>
<p>将内容存储在 CDN 上可以从两个方面来提供性能:</p>
<ul>
<li>从靠近用户的数据中心提供资源</li>
<li>通过 CDN 你的服务器不必真的处理请求</li>
</ul>
<h3 id="cdn-推送-push" tabindex="-1"> CDN 推送（push）</h3>
<p>当你服务器上内容发生变动时，推送 CDN 接受新内容。直接推送给 CDN 并重写 URL 地址以指向你的内容的 CDN 地址。你可以配置内容到期时间及何时更新。内容只有在更改或新增是才推送，流量最小化，但储存最大化。</p>
<h3 id="cdn-拉取-pull" tabindex="-1"> CDN 拉取（pull）</h3>
<p>CDN 拉取是当第一个用户请求该资源时，从服务器上拉取资源。你将内容留在自己的服务器上并重写 URL 指向 CDN 地址。直到内容被缓存在 CDN 上为止，这样请求只会更慢，</p>
<p><a href="https://en.wikipedia.org/wiki/Time_to_live" target="_blank" rel="noopener noreferrer">存活时间（TTL）</a>决定缓存多久时间。CDN 拉取方式最小化 CDN 上的储存空间，但如果过期文件并在实际更改之前被拉取，则会导致冗余的流量。</p>
<p>高流量站点使用 CDN 拉取效果不错，因为只有最近请求的内容保存在 CDN 中，流量才能更平衡地分散。</p>
<h3 id="缺陷-cdn" tabindex="-1"> 缺陷：CDN</h3>
<ul>
<li>CDN 成本可能因流量而异，可能在权衡之后你将不会使用 CDN。</li>
<li>如果在 TTL 过期之前更新内容，CDN 缓存内容可能会过时。</li>
<li>CDN 需要更改静态内容的 URL 地址以指向 CDN。</li>
</ul>
<h3 id="来源及延伸阅读-5" tabindex="-1"> 来源及延伸阅读</h3>
<ul>
<li><a href="http://repository.cmu.edu/cgi/viewcontent.cgi?article=2112&amp;context=compsci" target="_blank" rel="noopener noreferrer">全球性内容分发网络</a></li>
<li><a href="http://www.travelblogadvice.com/technical/the-differences-between-push-and-pull-cdns/" target="_blank" rel="noopener noreferrer">CDN 拉取和 CDN 推送的区别</a></li>
<li><a href="https://en.wikipedia.org/wiki/Content_delivery_network" target="_blank" rel="noopener noreferrer">Wikipedia</a></li>
</ul>
<h2 id="负载均衡器" tabindex="-1"> 负载均衡器</h2>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/eH0pZ3.png">
  <i>Content not supported</i>
  <strong><a href="http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html">来源：可扩展的系统设计模式</a></strong>
</p>
<p>负载均衡器将传入的请求分发到应用服务器和数据库等计算资源。无论哪种情况，负载均衡器将从计算资源来的响应返回给恰当的客户端。负载均衡器的效用在于:</p>
<ul>
<li>防止请求进入不好的服务器</li>
<li>防止资源过载</li>
<li>帮助消除单一的故障点</li>
</ul>
<p>负载均衡器可以通过硬件（昂贵）或 HAProxy 等软件来实现。
增加的好处包括:</p>
<ul>
<li><strong>SSL 终结</strong> ─ 解密传入的请求并加密服务器响应，这样的话后端服务器就不必再执行这些潜在高消耗运算了。
<ul>
<li>不需要再每台服务器上安装 <a href="https://en.wikipedia.org/wiki/X.509" target="_blank" rel="noopener noreferrer">X.509 证书</a>。</li>
</ul>
</li>
<li><strong>Session 留存</strong> ─ 如果 Web 应用程序不追踪会话，发出 cookie 并将特定客户端的请求路由到同一实例。</li>
</ul>
<p>通常会设置采用 或  模式的多个负载均衡器，以免发生故障。</p>
<p>负载均衡器能基于多种方式来路由流量:</p>
<ul>
<li>随机</li>
<li>最少负载</li>
<li>Session/cookie</li>
<li><a href="http://g33kinfo.com/info/archives/2657" target="_blank" rel="noopener noreferrer">轮询调度或加权轮询调度算法</a></li>
<li></li>
<li></li>
</ul>
<h3 id="四层负载均衡" tabindex="-1"> 四层负载均衡</h3>
<p>四层负载均衡根据监看的信息来决定如何分发请求。通常，这会涉及来源，目标 IP 地址和请求头中的端口，但不包括数据包（报文）内容。四层负载均衡执行<a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/" target="_blank" rel="noopener noreferrer">网络地址转换（NAT）</a>来向上游服务器转发网络数据包。</p>
<h3 id="七层负载均衡器" tabindex="-1"> 七层负载均衡器</h3>
<p>七层负载均衡器根据监控来决定怎样分发请求。这会涉及请求头的内容，消息和 cookie。七层负载均衡器终结网络流量，读取消息，做出负载均衡判定，然后传送给特定服务器。比如，一个七层负载均衡器能直接将视频流量连接到托管视频的服务器，同时将更敏感的用户账单流量引导到安全性更强的服务器。</p>
<p>以损失灵活性为代价，四层负载均衡比七层负载均衡花费更少时间和计算资源，虽然这对现代商用硬件的性能影响甚微。</p>
<h3 id="水平扩展" tabindex="-1"> 水平扩展</h3>
<p>负载均衡器还能帮助水平扩展，提高性能和可用性。使用商业硬件的性价比更高，并且比在单台硬件上<strong>垂直扩展</strong>更贵的硬件具有更高的可用性。相比招聘特定企业系统人才，招聘商业硬件方面的人才更加容易。</p>
<h4 id="缺陷-水平扩展" tabindex="-1"> 缺陷：水平扩展</h4>
<ul>
<li>水平扩展引入了复杂度并涉及服务器复制
<ul>
<li>服务器应该是无状态的:它们也不该包含像 session 或资料图片等与用户关联的数据。</li>
<li>session 可以集中存储在数据库或持久化（Redis、Memcached）的数据存储区中。</li>
</ul>
</li>
<li>缓存和数据库等下游服务器需要随着上游服务器进行扩展，以处理更多的并发连接。</li>
</ul>
<h3 id="缺陷-负载均衡器" tabindex="-1"> 缺陷：负载均衡器</h3>
<ul>
<li>如果没有足够的资源配置或配置错误，负载均衡器会变成一个性能瓶颈。</li>
<li>引入负载均衡器以帮助消除单点故障但导致了额外的复杂性。</li>
<li>单个负载均衡器会导致单点故障，但配置多个负载均衡器会进一步增加复杂性。</li>
</ul>
<h3 id="来源及延伸阅读-6" tabindex="-1"> 来源及延伸阅读</h3>
<ul>
<li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener noreferrer">NGINX 架构</a></li>
<li><a href="http://www.haproxy.org/download/1.2/doc/architecture.txt" target="_blank" rel="noopener noreferrer">HAProxy 架构指南</a></li>
<li><a href="http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones" target="_blank" rel="noopener noreferrer">可扩展性</a></li>
<li><a href="https://en.wikipedia.org/wiki/Load_balancing_(computing)" target="_blank" rel="noopener noreferrer">Wikipedia</a></li>
<li><a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/" target="_blank" rel="noopener noreferrer">四层负载平衡</a></li>
<li><a href="https://www.nginx.com/resources/glossary/layer-7-load-balancing/" target="_blank" rel="noopener noreferrer">七层负载平衡</a></li>
<li><a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html" target="_blank" rel="noopener noreferrer">ELB 监听器配置</a></li>
</ul>
<h2 id="反向代理-web-服务器" tabindex="-1"> 反向代理（web 服务器）</h2>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/99lNyZ.png">
  <i>Content not supported</i>
  <strong><a href="https://upload.wikimedia.org/wikipedia/commons/6/67/Reverse_proxy_h2g2bob.svg">资料来源：维基百科</a></strong>
  <i>Content not supported</i>
</p>
<p>反向代理是一种可以集中地调用内部服务，并提供统一接口给公共客户的 web 服务器。来自客户端的请求先被反向代理服务器转发到可响应请求的服务器，然后代理再把服务器的响应结果返回给客户端。</p>
<p>带来的好处包括：</p>
<ul>
<li><strong>增加安全性</strong> - 隐藏后端服务器的信息，屏蔽黑名单中的 IP，限制每个客户端的连接数。</li>
<li><strong>提高可扩展性和灵活性</strong> - 客户端只能看到反向代理服务器的 IP，这使你可以增减服务器或者修改它们的配置。</li>
<li><strong>本地终结 SSL 会话</strong> - 解密传入请求，加密服务器响应，这样后端服务器就不必完成这些潜在的高成本的操作。
<ul>
<li>免除了在每个服务器上安装 <a href="https://en.wikipedia.org/wiki/X.509" target="_blank" rel="noopener noreferrer">X.509</a> 证书的需要</li>
</ul>
</li>
<li><strong>压缩</strong> - 压缩服务器响应</li>
<li><strong>缓存</strong> - 直接返回命中的缓存结果</li>
<li><strong>静态内容</strong> - 直接提供静态内容
<ul>
<li>HTML/CSS/JS</li>
<li>图片</li>
<li>视频</li>
<li>等等</li>
</ul>
</li>
</ul>
<h3 id="负载均衡器与反向代理" tabindex="-1"> 负载均衡器与反向代理</h3>
<ul>
<li>当你有多个服务器时，部署负载均衡器非常有用。通常，负载均衡器将流量路由给一组功能相同的服务器上。</li>
<li>即使只有一台 web 服务器或者应用服务器时，反向代理也有用，可以参考上一节介绍的好处。</li>
<li>NGINX 和 HAProxy 等解决方案可以同时支持第七层反向代理和负载均衡。</li>
</ul>
<h3 id="不利之处-反向代理" tabindex="-1"> 不利之处：反向代理</h3>
<ul>
<li>引入反向代理会增加系统的复杂度。</li>
<li>单独一个反向代理服务器仍可能发生单点故障，配置多台反向代理服务器（如<a href="https://en.wikipedia.org/wiki/Failover" target="_blank" rel="noopener noreferrer">故障转移</a>）会进一步增加复杂度。</li>
</ul>
<h3 id="来源及延伸阅读-7" tabindex="-1"> 来源及延伸阅读</h3>
<ul>
<li><a href="https://www.nginx.com/resources/glossary/reverse-proxy-vs-load-balancer/" target="_blank" rel="noopener noreferrer">反向代理与负载均衡</a></li>
<li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener noreferrer">NGINX 架构</a></li>
<li><a href="http://www.haproxy.org/download/1.2/doc/architecture.txt" target="_blank" rel="noopener noreferrer">HAProxy 架构指南</a></li>
<li><a href="https://en.wikipedia.org/wiki/Reverse_proxy" target="_blank" rel="noopener noreferrer">Wikipedia</a></li>
</ul>
<h2 id="应用层" tabindex="-1"> 应用层</h2>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/Vn6Dxd.png">
  <i>Content not supported</i>
  <strong><a href="http://lethain.com/introduction-to-architecting-systems-for-scale/#platform_layer">资料来源：可缩放系统构架介绍</a></strong>
</p>
<p>将 Web 服务层与应用层（也被称作平台层）分离，可以独立缩放和配置这两层。添加新的 API 只需要添加应用服务器，而不必添加额外的 web 服务器。</p>
<p><strong>单一职责原则</strong>提倡小型的，自治的服务共同合作。小团队通过提供小型的服务，可以更激进地计划增长。</p>
<p>应用层中的工作进程也有可以实现。</p>
<h3 id="微服务" tabindex="-1"> 微服务</h3>
<p>与此讨论相关的话题是 <a href="https://en.wikipedia.org/wiki/Microservices" target="_blank" rel="noopener noreferrer">微服务</a>，可以被描述为一系列可以独立部署的小型的，模块化服务。每个服务运行在一个独立的线程中，通过明确定义的轻量级机制通讯，共同实现业务目标。<sup><a href=https://smartbear.com/learn/api-design/what-are-microservices>1</a></sup></p>
<p>例如，Pinterest 可能有这些微服务： 用户资料、关注者、Feed 流、搜索、照片上传等。</p>
<h3 id="服务发现" tabindex="-1"> 服务发现</h3>
<p>像 <a href="https://www.consul.io/docs/index.html" target="_blank" rel="noopener noreferrer">Consul</a>，<a href="https://coreos.com/etcd/docs/latest" target="_blank" rel="noopener noreferrer">Etcd</a> 和 <a href="http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper" target="_blank" rel="noopener noreferrer">Zookeeper</a> 这样的系统可以通过追踪注册名、地址、端口等信息来帮助服务互相发现对方。<a href="https://www.consul.io/intro/getting-started/checks.html" target="_blank" rel="noopener noreferrer">Health checks</a> 可以帮助确认服务的完整性和是否经常使用一个  路径。Consul 和 Etcd 都有一个内建的  用来存储配置信息和其他的共享信息。</p>
<h3 id="不利之处-应用层" tabindex="-1"> 不利之处：应用层</h3>
<ul>
<li>添加由多个松耦合服务组成的应用层，从架构、运营、流程等层面来讲将非常不同（相对于单体系统）。</li>
<li>微服务会增加部署和运营的复杂度。</li>
</ul>
<h3 id="来源及延伸阅读-8" tabindex="-1"> 来源及延伸阅读</h3>
<ul>
<li><a href="http://lethain.com/introduction-to-architecting-systems-for-scale" target="_blank" rel="noopener noreferrer">可缩放系统构架介绍</a></li>
<li><a href="http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview" target="_blank" rel="noopener noreferrer">破解系统设计面试</a></li>
<li><a href="https://en.wikipedia.org/wiki/Service-oriented_architecture" target="_blank" rel="noopener noreferrer">面向服务架构</a></li>
<li><a href="http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper" target="_blank" rel="noopener noreferrer">Zookeeper 介绍</a></li>
<li><a href="https://cloudncode.wordpress.com/2016/07/22/msa-getting-started/" target="_blank" rel="noopener noreferrer">构建微服务，你所需要知道的一切</a></li>
</ul>
<h2 id="数据库" tabindex="-1"> 数据库</h2>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/Yphy9o.png">
  <i>Content not supported</i>
  <strong><a href="https://www.youtube.com/watch?v=w95murBkYmU">资料来源：扩展你的用户数到第一个一千万</a></strong>
</p>
<h3 id="关系型数据库管理系统-rdbms" tabindex="-1"> 关系型数据库管理系统（RDBMS）</h3>
<p>像 SQL 这样的关系型数据库是一系列以表的形式组织的数据项集合。</p>
<blockquote>
<p>校对注：这里作者 SQL 可能指的是 MySQL</p>
</blockquote>
<p><strong>ACID</strong> 用来描述关系型数据库<a href="https://en.wikipedia.org/wiki/Database_transaction" target="_blank" rel="noopener noreferrer">事务</a>的特性。</p>
<ul>
<li><strong>原子性</strong> - 每个事务内部所有操作要么全部完成，要么全部不完成。</li>
<li><strong>一致性</strong> - 任何事务都使数据库从一个有效的状态转换到另一个有效状态。</li>
<li><strong>隔离性</strong> - 并发执行事务的结果与顺序执行事务的结果相同。</li>
<li><strong>持久性</strong> - 事务提交后，对系统的影响是永久的。</li>
</ul>
<p>关系型数据库扩展包括许多技术：<strong>主从复制</strong>、<strong>主主复制</strong>、<strong>联合</strong>、<strong>分片</strong>、<strong>非规范化</strong>和 <strong>SQL 调优</strong>。</p>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/J9ekTj.png">
  <i>Content not supported</i>
  <strong><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/">资料来源：可扩展性、可用性、稳定性、模式</a></strong>
</p>
<h4 id="主从复制" tabindex="-1"> 主从复制</h4>
<p>主库同时负责读取和写入操作，并复制写入到一个或多个从库中，从库只负责读操作。树状形式的从库再将写入复制到更多的从库中去。如果主库离线，系统可以以只读模式运行，直到某个从库被提升为主库或有新的主库出现。</p>
<h5 id="不利之处-主从复制" tabindex="-1"> 不利之处：主从复制</h5>
<ul>
<li>将从库提升为主库需要额外的逻辑。</li>
<li>参考中，主从复制和主主复制<strong>共同</strong>的问题。</li>
</ul>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/SqrqxL.png">
  <i>Content not supported</i>
  <strong><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/">资料来源：可扩展性、可用性、稳定性、模式</a></strong>
</p>
<h4 id="主主复制" tabindex="-1"> 主主复制</h4>
<p>两个主库都负责读操作和写操作，写入操作时互相协调。如果其中一个主库挂机，系统可以继续读取和写入。</p>
<h5 id="不利之处-主主复制" tabindex="-1"> 不利之处： 主主复制</h5>
<ul>
<li>你需要添加负载均衡器或者在应用逻辑中做改动，来确定写入哪一个数据库。</li>
<li>多数主-主系统要么不能保证一致性（违反 ACID），要么因为同步产生了写入延迟。</li>
<li>随着更多写入节点的加入和延迟的提高，如何解决冲突显得越发重要。</li>
<li>参考中，主从复制和主主复制<strong>共同</strong>的问题。</li>
</ul>
<h5 id="不利之处-复制" tabindex="-1"> 不利之处：复制</h5>
<ul>
<li>如果主库在将新写入的数据复制到其他节点前挂掉，则有数据丢失的可能。</li>
<li>写入会被重放到负责读取操作的副本。副本可能因为过多写操作阻塞住，导致读取功能异常。</li>
<li>读取从库越多，需要复制的写入数据就越多，导致更严重的复制延迟。</li>
<li>在某些数据库系统中，写入主库的操作可以用多个线程并行写入，但读取副本只支持单线程顺序地写入。</li>
<li>复制意味着更多的硬件和额外的复杂度。</li>
</ul>
<h5 id="来源及延伸阅读-9" tabindex="-1"> 来源及延伸阅读</h5>
<ul>
<li><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/" target="_blank" rel="noopener noreferrer">扩展性，可用性，稳定性模式</a></li>
<li><a href="https://en.wikipedia.org/wiki/Multi-master_replication" target="_blank" rel="noopener noreferrer">多主复制</a></li>
</ul>
<h4 id="联合" tabindex="-1"> 联合</h4>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/d4lFbX.png">
  <i>Content not supported</i>
  <strong><a href="https://www.youtube.com/watch?v=w95murBkYmU">资料来源：扩展你的用户数到第一个一千万</a></strong>
</p>
<p>联合（或按功能划分）将数据库按对应功能分割。例如，你可以有三个数据库：<strong>论坛</strong>、<strong>用户</strong>和<strong>产品</strong>，而不仅是一个单体数据库，从而减少每个数据库的读取和写入流量，减少复制延迟。较小的数据库意味着更多适合放入内存的数据，进而意味着更高的缓存命中几率。没有只能串行写入的中心化主库，你可以并行写入，提高负载能力。</p>
<h5 id="不利之处-联合" tabindex="-1"> 不利之处：联合</h5>
<ul>
<li>如果你的数据库模式需要大量的功能和数据表，联合的效率并不好。</li>
<li>你需要更新应用程序的逻辑来确定要读取和写入哪个数据库。</li>
<li>用 <a href="http://stackoverflow.com/questions/5145637/querying-data-by-joining-two-tables-in-two-database-on-different-servers" target="_blank" rel="noopener noreferrer">server link</a> 从两个库联结数据更复杂。</li>
<li>联合需要更多的硬件和额外的复杂度。</li>
</ul>
<h5 id="来源及延伸阅读-联合" tabindex="-1"> 来源及延伸阅读：联合</h5>
<ul>
<li><a href="https://www.youtube.com/watch?v=w95murBkYmU" target="_blank" rel="noopener noreferrer">扩展你的用户数到第一个一千万</a></li>
</ul>
<h4 id="分片" tabindex="-1"> 分片</h4>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/Cl5xCU.png">
  <i>Content not supported</i>
  <strong><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/">资料来源：可扩展性、可用性、稳定性、模式</a></strong>
</p>
<p>分片将数据分配在不同的数据库上，使得每个数据库仅管理整个数据集的一个子集。以用户数据库为例，随着用户数量的增加，越来越多的分片会被添加到集群中。</p>
<p>类似的优点，分片可以减少读取和写入流量，减少复制并提高缓存命中率。也减少了索引，通常意味着查询更快，性能更好。如果一个分片出问题，其他的仍能运行，你可以使用某种形式的冗余来防止数据丢失。类似联合，没有只能串行写入的中心化主库，你可以并行写入，提高负载能力。</p>
<p>常见的做法是用户姓氏的首字母或者用户的地理位置来分隔用户表。</p>
<h5 id="不利之处-分片" tabindex="-1"> 不利之处：分片</h5>
<ul>
<li>你需要修改应用程序的逻辑来实现分片，这会带来复杂的 SQL 查询。</li>
<li>分片不合理可能导致数据负载不均衡。例如，被频繁访问的用户数据会导致其所在分片的负载相对其他分片高。
<ul>
<li>再平衡会引入额外的复杂度。基于<a href="http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html" target="_blank" rel="noopener noreferrer">一致性哈希</a>的分片算法可以减少这种情况。</li>
</ul>
</li>
<li>联结多个分片的数据操作更复杂。</li>
<li>分片需要更多的硬件和额外的复杂度。</li>
</ul>
<h4 id="来源及延伸阅读-分片" tabindex="-1"> 来源及延伸阅读：分片</h4>
<ul>
<li><a href="http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html" target="_blank" rel="noopener noreferrer">分片时代来临</a></li>
<li><a href="https://en.wikipedia.org/wiki/Shard_(database_architecture)" target="_blank" rel="noopener noreferrer">数据库分片架构</a></li>
<li><a href="http://www.paperplanes.de/2011/12/9/the-magic-of-consistent-hashing.html" target="_blank" rel="noopener noreferrer">一致性哈希</a></li>
</ul>
<h4 id="非规范化" tabindex="-1"> 非规范化</h4>
<p>非规范化试图以写入性能为代价来换取读取性能。在多个表中冗余数据副本，以避免高成本的联结操作。一些关系型数据库，比如 <a href="https://en.wikipedia.org/wiki/PostgreSQL" target="_blank" rel="noopener noreferrer">PostgreSQL</a> 和 Oracle 支持<a href="https://en.wikipedia.org/wiki/Materialized_view" target="_blank" rel="noopener noreferrer">物化视图</a>，可以处理冗余信息存储和保证冗余副本一致。</p>
<p>当数据使用诸如和等技术被分割，进一步提高了处理跨数据中心的联结操作复杂度。非规范化可以规避这种复杂的联结操作。</p>
<p>在多数系统中，读取操作的频率远高于写入操作，比例可达到 100:1，甚至 1000:1。需要复杂的数据库联结的读取操作成本非常高，在磁盘操作上消耗了大量时间。</p>
<h5 id="不利之处-非规范化" tabindex="-1"> 不利之处：非规范化</h5>
<ul>
<li>数据会冗余。</li>
<li>约束可以帮助冗余的信息副本保持同步，但这样会增加数据库设计的复杂度。</li>
<li>非规范化的数据库在高写入负载下性能可能比规范化的数据库差。</li>
</ul>
<h5 id="来源及延伸阅读-非规范化" tabindex="-1"> 来源及延伸阅读：非规范化</h5>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Denormalization" target="_blank" rel="noopener noreferrer">非规范化</a></li>
</ul>
<h4 id="sql-调优" tabindex="-1"> SQL 调优</h4>
<p>SQL 调优是一个范围很广的话题，有很多相关的<a href="https://www.amazon.com/s/ref=nb_sb_noss_2?url=search-alias%3Daps&amp;field-keywords=sql+tuning" target="_blank" rel="noopener noreferrer">书</a>可以作为参考。</p>
<p>利用<strong>基准测试</strong>和<strong>性能分析</strong>来模拟和发现系统瓶颈很重要。</p>
<ul>
<li><strong>基准测试</strong> - 用 <a href="http://httpd.apache.org/docs/2.2/programs/ab.html" target="_blank" rel="noopener noreferrer">ab</a> 等工具模拟高负载情况。</li>
<li><strong>性能分析</strong> - 通过启用如<a href="http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html" target="_blank" rel="noopener noreferrer">慢查询日志</a>等工具来辅助追踪性能问题。</li>
</ul>
<p>基准测试和性能分析可能会指引你到以下优化方案。</p>
<h5 id="改进模式" tabindex="-1"> 改进模式</h5>
<ul>
<li>为了实现快速访问，MySQL 在磁盘上用连续的块存储数据。</li>
<li>使用 <code>CHAR</code> 类型存储固定长度的字段，不要用 <code>VARCHAR</code>。
<ul>
<li><code>CHAR</code> 在快速、随机访问时效率很高。如果使用 <code>VARCHAR</code>，如果你想读取下一个字符串，不得不先读取到当前字符串的末尾。</li>
</ul>
</li>
<li>使用 <code>TEXT</code> 类型存储大块的文本，例如博客正文。<code>TEXT</code> 还允许布尔搜索。使用 <code>TEXT</code> 字段需要在磁盘上存储一个用于定位文本块的指针。</li>
<li>使用 <code>INT</code> 类型存储高达 2^32 或 40 亿的较大数字。</li>
<li>使用 <code>DECIMAL</code> 类型存储货币可以避免浮点数表示错误。</li>
<li>避免使用 <code>BLOBS</code> 存储实际对象，而是用来存储存放对象的位置。</li>
<li><code>VARCHAR(255)</code> 是以 8 位数字存储的最大字符数，在某些关系型数据库中，最大限度地利用字节。</li>
<li>在适用场景中设置 <code>NOT NULL</code> 约束来<a href="http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search" target="_blank" rel="noopener noreferrer">提高搜索性能</a>。</li>
</ul>
<h5 id="使用正确的索引" tabindex="-1"> 使用正确的索引</h5>
<ul>
<li>你正查询（<code>SELECT</code>、<code>GROUP BY</code>、<code>ORDER BY</code>、<code>JOIN</code>）的列如果用了索引会更快。</li>
<li>索引通常表示为自平衡的 <a href="https://en.wikipedia.org/wiki/B-tree" target="_blank" rel="noopener noreferrer">B 树</a>，可以保持数据有序，并允许在对数时间内进行搜索，顺序访问，插入，删除操作。</li>
<li>设置索引，会将数据存在内存中，占用了更多内存空间。</li>
<li>写入操作会变慢，因为索引需要被更新。</li>
<li>加载大量数据时，禁用索引再加载数据，然后重建索引，这样也许会更快。</li>
</ul>
<h5 id="避免高成本的联结操作" tabindex="-1"> 避免高成本的联结操作</h5>
<ul>
<li>有性能需要，可以进行非规范化。</li>
</ul>
<h5 id="分割数据表" tabindex="-1"> 分割数据表</h5>
<ul>
<li>将热点数据拆分到单独的数据表中，可以有助于缓存。</li>
</ul>
<h5 id="调优查询缓存" tabindex="-1"> 调优查询缓存</h5>
<ul>
<li>在某些情况下，<a href="http://dev.mysql.com/doc/refman/5.7/en/query-cache" target="_blank" rel="noopener noreferrer">查询缓存</a>可能会导致<a href="https://www.percona.com/blog/2014/01/28/10-mysql-performance-tuning-settings-after-installation/" target="_blank" rel="noopener noreferrer">性能问题</a>。</li>
</ul>
<h5 id="来源及延伸阅读-10" tabindex="-1"> 来源及延伸阅读</h5>
<ul>
<li><a href="http://20bits.com/article/10-tips-for-optimizing-mysql-queries-that-dont-suck" target="_blank" rel="noopener noreferrer">MySQL 查询优化小贴士</a></li>
<li><a href="http://stackoverflow.com/questions/1217466/is-there-a-good-reason-i-see-varchar255-used-so-often-as-opposed-to-another-l" target="_blank" rel="noopener noreferrer">为什么 VARCHAR(255) 很常见？</a></li>
<li><a href="http://stackoverflow.com/questions/1017239/how-do-null-values-affect-performance-in-a-database-search" target="_blank" rel="noopener noreferrer">Null 值是如何影响数据库性能的？</a></li>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html" target="_blank" rel="noopener noreferrer">慢查询日志</a></li>
</ul>
<h3 id="nosql" tabindex="-1"> NoSQL</h3>
<p>NoSQL 是<strong>键-值数据库</strong>、<strong>文档型数据库</strong>、<strong>列型数据库</strong>或<strong>图数据库</strong>的统称。数据库是非规范化的，表联结大多在应用程序代码中完成。大多数 NoSQL 无法实现真正符合 ACID 的事务，支持。</p>
<p><strong>BASE</strong> 通常被用于描述 NoSQL 数据库的特性。相比 ，BASE 强调可用性超过一致性。</p>
<ul>
<li><strong>基本可用</strong> - 系统保证可用性。</li>
<li><strong>软状态</strong> - 即使没有输入，系统状态也可能随着时间变化。</li>
<li><strong>最终一致性</strong> - 经过一段时间之后，系统最终会变一致，因为系统在此期间没有收到任何输入。</li>
</ul>
<p>除了在  之间做选择，了解哪种类型的 NoSQL 数据库最适合你的用例也是非常有帮助的。我们将在下一节中快速了解下 <strong>键-值存储</strong>、<strong>文档型存储</strong>、<strong>列型存储</strong>和<strong>图存储</strong>数据库。</p>
<h4 id="键-值存储" tabindex="-1"> 键-值存储</h4>
<blockquote>
<p>抽象模型：哈希表</p>
</blockquote>
<p>键-值存储通常可以实现 O(1) 时间读写，用内存或 SSD 存储数据。数据存储可以按<a href="https://en.wikipedia.org/wiki/Lexicographical_order" target="_blank" rel="noopener noreferrer">字典顺序</a>维护键，从而实现键的高效检索。键-值存储可以用于存储元数据。</p>
<p>键-值存储性能很高，通常用于存储简单数据模型或频繁修改的数据，如存放在内存中的缓存。键-值存储提供的操作有限，如果需要更多操作，复杂度将转嫁到应用程序层面。</p>
<p>键-值存储是如文档存储，在某些情况下，甚至是图存储等更复杂的存储系统的基础。</p>
<h4 id="来源及延伸阅读-11" tabindex="-1"> 来源及延伸阅读</h4>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Key-value_database" target="_blank" rel="noopener noreferrer">键-值数据库</a></li>
<li><a href="http://stackoverflow.com/questions/4056093/what-are-the-disadvantages-of-using-a-key-value-table-over-nullable-columns-or" target="_blank" rel="noopener noreferrer">键-值存储的劣势</a></li>
<li><a href="http://qnimate.com/overview-of-redis-architecture/" target="_blank" rel="noopener noreferrer">Redis 架构</a></li>
<li><a href="https://adayinthelifeof.nl/2011/02/06/memcache-internals/" target="_blank" rel="noopener noreferrer">Memcached 架构</a></li>
</ul>
<h4 id="文档类型存储" tabindex="-1"> 文档类型存储</h4>
<blockquote>
<p>抽象模型：将文档作为值的键-值存储</p>
</blockquote>
<p>文档类型存储以文档（XML、JSON、二进制文件等）为中心，文档存储了指定对象的全部信息。文档存储根据文档自身的内部结构提供 API 或查询语句来实现查询。请注意，许多键-值存储数据库有用值存储元数据的特性，这也模糊了这两种存储类型的界限。</p>
<p>基于底层实现，文档可以根据集合、标签、元数据或者文件夹组织。尽管不同文档可以被组织在一起或者分成一组，但相互之间可能具有完全不同的字段。</p>
<p>MongoDB 和 CouchDB 等一些文档类型存储还提供了类似 SQL 语言的查询语句来实现复杂查询。DynamoDB 同时支持键-值存储和文档类型存储。</p>
<p>文档类型存储具备高度的灵活性，常用于处理偶尔变化的数据。</p>
<h4 id="来源及延伸阅读-文档类型存储" tabindex="-1"> 来源及延伸阅读：文档类型存储</h4>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Document-oriented_database" target="_blank" rel="noopener noreferrer">面向文档的数据库</a></li>
<li><a href="https://www.mongodb.com/mongodb-architecture" target="_blank" rel="noopener noreferrer">MongoDB 架构</a></li>
<li><a href="https://blog.couchdb.org/2016/08/01/couchdb-2-0-architecture/" target="_blank" rel="noopener noreferrer">CouchDB 架构</a></li>
<li><a href="https://www.elastic.co/blog/found-elasticsearch-from-the-bottom-up" target="_blank" rel="noopener noreferrer">Elasticsearch 架构</a></li>
</ul>
<h4 id="列型存储" tabindex="-1"> 列型存储</h4>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/6Ys6ur.png">
  <i>Content not supported</i>
  <strong><a href="http://blog.grio.com/2015/11/sql-nosql-a-brief-history.html">资料来源: SQL 和 NoSQL，一个简短的历史</a></strong>
</p>
<blockquote>
<p>抽象模型：嵌套的 <code>ColumnFamily&lt;RowKey, Columns&lt;ColKey, Value, Timestamp&gt;&gt;</code> 映射</p>
</blockquote>
<p>类型存储的基本数据单元是列（名／值对）。列可以在列族（类似于 SQL 的数据表）中被分组。超级列族再分组普通列族。你可以使用行键独立访问每一列，具有相同行键值的列组成一行。每个值都包含版本的时间戳用于解决版本冲突。</p>
<p>Google 发布了第一个列型存储数据库 <a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf" target="_blank" rel="noopener noreferrer">Bigtable</a>，它影响了 Hadoop 生态系统中活跃的开源数据库 <a href="https://www.mapr.com/blog/in-depth-look-hbase-architecture" target="_blank" rel="noopener noreferrer">HBase</a> 和 Facebook 的 <a href="http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/architecture/architectureIntro_c.html" target="_blank" rel="noopener noreferrer">Cassandra</a>。像 BigTable，HBase 和 Cassandra 这样的存储系统将键以字母顺序存储，可以高效地读取键列。</p>
<p>列型存储具备高可用性和高可扩展性。通常被用于大数据相关存储。</p>
<h5 id="来源及延伸阅读-列型存储" tabindex="-1"> 来源及延伸阅读：列型存储</h5>
<ul>
<li><a href="http://blog.grio.com/2015/11/sql-nosql-a-brief-history.html" target="_blank" rel="noopener noreferrer">SQL 与 NoSQL 简史</a></li>
<li><a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf" target="_blank" rel="noopener noreferrer">BigTable 架构</a></li>
<li><a href="https://www.mapr.com/blog/in-depth-look-hbase-architecture" target="_blank" rel="noopener noreferrer">Hbase 架构</a></li>
<li><a href="http://docs.datastax.com/en/archived/cassandra/2.0/cassandra/architecture/architectureIntro_c.html" target="_blank" rel="noopener noreferrer">Cassandra 架构</a></li>
</ul>
<h4 id="图数据库" tabindex="-1"> 图数据库</h4>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/PLUwzS.png">
  <i>Content not supported</i>
  <strong><a href="https://en.wikipedia.org/wiki/File:GraphDatabase_PropertyGraph.png">资料来源：图数据库</a></strong>
</p>
<blockquote>
<p>抽象模型： 图</p>
</blockquote>
<p>在图数据库中，一个节点对应一条记录，一个弧对应两个节点之间的关系。图数据库被优化用于表示外键繁多的复杂关系或多对多关系。</p>
<p>图数据库为存储复杂关系的数据模型，如社交网络，提供了很高的性能。它们相对较新，尚未广泛应用，查找开发工具或者资源相对较难。许多图只能通过  访问。</p>
<h5 id="相关资源和延伸阅读-图" tabindex="-1"> 相关资源和延伸阅读：图</h5>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Graph_database" target="_blank" rel="noopener noreferrer">图数据库</a></li>
<li><a href="https://neo4j.com/" target="_blank" rel="noopener noreferrer">Neo4j</a></li>
<li><a href="https://blog.twitter.com/2010/introducing-flockdb" target="_blank" rel="noopener noreferrer">FlockDB</a></li>
</ul>
<h4 id="来源及延伸阅读-nosql" tabindex="-1"> 来源及延伸阅读：NoSQL</h4>
<ul>
<li><a href="http://stackoverflow.com/questions/3342497/explanation-of-base-terminology" target="_blank" rel="noopener noreferrer">数据库术语解释</a></li>
<li><a href="https://medium.com/baqend-blog/nosql-databases-a-survey-and-decision-guidance-ea7823a822d#.wskogqenq" target="_blank" rel="noopener noreferrer">NoSQL 数据库 - 调查及决策指南</a></li>
<li><a href="http://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database" target="_blank" rel="noopener noreferrer">可扩展性</a></li>
<li><a href="https://www.youtube.com/watch?v=qI_g07C_Q5I" target="_blank" rel="noopener noreferrer">NoSQL 介绍</a></li>
<li><a href="http://horicky.blogspot.com/2009/11/nosql-patterns.html" target="_blank" rel="noopener noreferrer">NoSQL 模式</a></li>
</ul>
<h3 id="sql-还是-nosql" tabindex="-1"> SQL 还是 NoSQL</h3>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/lwTe70.png">
  <i>Content not supported</i>
  <strong><a href="https://www.infoq.com/articles/Transition-RDBMS-NoSQL/">资料来源：从 RDBMS 转换到 NoSQL</a></strong>
</p>
<p>选取 <strong>SQL</strong> 的原因:</p>
<ul>
<li>结构化数据</li>
<li>严格的模式</li>
<li>关系型数据</li>
<li>需要复杂的联结操作</li>
<li>事务</li>
<li>清晰的扩展模式</li>
<li>既有资源更丰富：开发者、社区、代码库、工具等</li>
<li>通过索引进行查询非常快</li>
</ul>
<p>选取 <strong>NoSQL</strong> 的原因：</p>
<ul>
<li>半结构化数据</li>
<li>动态或灵活的模式</li>
<li>非关系型数据</li>
<li>不需要复杂的联结操作</li>
<li>存储 TB （甚至 PB）级别的数据</li>
<li>高数据密集的工作负载</li>
<li>IOPS 高吞吐量</li>
</ul>
<p>适合 NoSQL 的示例数据：</p>
<ul>
<li>埋点数据和日志数据</li>
<li>排行榜或者得分数据</li>
<li>临时数据，如购物车</li>
<li>频繁访问的（“热”）表</li>
<li>元数据／查找表</li>
</ul>
<h5 id="来源及延伸阅读-sql-或-nosql" tabindex="-1"> 来源及延伸阅读：SQL 或 NoSQL</h5>
<ul>
<li><a href="https://www.youtube.com/watch?v=w95murBkYmU" target="_blank" rel="noopener noreferrer">扩展你的用户数到第一个千万</a></li>
<li><a href="https://www.sitepoint.com/sql-vs-nosql-differences/" target="_blank" rel="noopener noreferrer">SQL 和 NoSQL 的不同</a></li>
</ul>
<h2 id="缓存" tabindex="-1"> 缓存</h2>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/jzJC80.png">
  <i>Content not supported</i>
  <strong><a href="http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html">资料来源：可扩展的系统设计模式</a></strong>
</p>
<p>缓存可以提高页面加载速度，并可以减少服务器和数据库的负载。在这个模型中，分发器先查看请求之前是否被响应过，如果有则将之前的结果直接返回，来省掉真正的处理。</p>
<p>数据库分片均匀分布的读取是最好的。但是热门数据会让读取分布不均匀，这样就会造成瓶颈，如果在数据库前加个缓存，就会抹平不均匀的负载和突发流量对数据库的影响。</p>
<h3 id="客户端缓存" tabindex="-1"> 客户端缓存</h3>
<p>缓存可以位于客户端（操作系统或者浏览器），或者不同的缓存层。</p>
<h3 id="cdn-缓存" tabindex="-1"> CDN 缓存</h3>
<p> 也被视为一种缓存。</p>
<h3 id="web-服务器缓存" tabindex="-1"> Web 服务器缓存</h3>
<p>和缓存（比如 <a href="https://www.varnish-cache.org/" target="_blank" rel="noopener noreferrer">Varnish</a>）可以直接提供静态和动态内容。Web 服务器同样也可以缓存请求，返回相应结果而不必连接应用服务器。</p>
<h3 id="数据库缓存" tabindex="-1"> 数据库缓存</h3>
<p>数据库的默认配置中通常包含缓存级别，针对一般用例进行了优化。调整配置，在不同情况下使用不同的模式可以进一步提高性能。</p>
<h3 id="应用缓存" tabindex="-1"> 应用缓存</h3>
<p>基于内存的缓存比如 Memcached 和 Redis 是应用程序和数据存储之间的一种键值存储。由于数据保存在 RAM 中，它比存储在磁盘上的典型数据库要快多了。RAM 比磁盘限制更多，所以例如 <a href="https://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used" target="_blank" rel="noopener noreferrer">least recently used (LRU)</a> 的<a href="https://en.wikipedia.org/wiki/Cache_algorithms" target="_blank" rel="noopener noreferrer">缓存无效算法</a>可以将「热门数据」放在 RAM 中，而对一些比较「冷门」的数据不做处理。</p>
<p>Redis 有下列附加功能：</p>
<ul>
<li>持久性选项</li>
<li>内置数据结构比如有序集合和列表</li>
</ul>
<p>有多个缓存级别，分为两大类：<strong>数据库查询</strong>和<strong>对象</strong>：</p>
<ul>
<li>行级别</li>
<li>查询级别</li>
<li>完整的可序列化对象</li>
<li>完全渲染的 HTML</li>
</ul>
<p>一般来说，你应该尽量避免基于文件的缓存，因为这使得复制和自动缩放很困难。</p>
<h3 id="数据库查询级别的缓存" tabindex="-1"> 数据库查询级别的缓存</h3>
<p>当你查询数据库的时候，将查询语句的哈希值与查询结果存储到缓存中。这种方法会遇到以下问题：</p>
<ul>
<li>很难用复杂的查询删除已缓存结果。</li>
<li>如果一条数据比如表中某条数据的一项被改变，则需要删除所有可能包含已更改项的缓存结果。</li>
</ul>
<h3 id="对象级别的缓存" tabindex="-1"> 对象级别的缓存</h3>
<p>将您的数据视为对象，就像对待你的应用代码一样。让应用程序将数据从数据库中组合到类实例或数据结构中：</p>
<ul>
<li>如果对象的基础数据已经更改了，那么从缓存中删掉这个对象。</li>
<li>允许异步处理：workers 通过使用最新的缓存对象来组装对象。</li>
</ul>
<p>建议缓存的内容：</p>
<ul>
<li>用户会话</li>
<li>完全渲染的 Web 页面</li>
<li>活动流</li>
<li>用户图数据</li>
</ul>
<h3 id="何时更新缓存" tabindex="-1"> 何时更新缓存</h3>
<p>由于你只能在缓存中存储有限的数据，所以你需要选择一个适用于你用例的缓存更新策略。</p>
<h4 id="缓存模式" tabindex="-1"> 缓存模式</h4>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/Iyf6Ae.png">
  <i>Content not supported</i>
  <strong><a href="http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast">资料来源：从缓存到内存数据网格</a></strong>
</p>
<p>应用从存储器读写。缓存不和存储器直接交互，应用执行以下操作：</p>
<ul>
<li>在缓存中查找记录，如果所需数据不在缓存中</li>
<li>从数据库中加载所需内容</li>
<li>将查找到的结果存储到缓存中</li>
<li>返回所需内容</li>
</ul>
<div><pre><code><span>def</span> <span>get_user</span><span>(</span>self<span>,</span> user_id<span>)</span><span>:</span>
    user <span>=</span> cache<span>.</span>get<span>(</span><span>"user.{0}"</span><span>,</span> user_id<span>)</span>
    <span>if</span> user <span>is</span> <span>None</span><span>:</span>
        user <span>=</span> db<span>.</span>query<span>(</span><span>"SELECT * FROM users WHERE user_id = {0}"</span><span>,</span> user_id<span>)</span>
        <span>if</span> user <span>is</span> <span>not</span> <span>None</span><span>:</span>
            key <span>=</span> <span>"user.{0}"</span><span>.</span><span>format</span><span>(</span>user_id<span>)</span>
            cache<span>.</span><span>set</span><span>(</span>key<span>,</span> json<span>.</span>dumps<span>(</span>user<span>)</span><span>)</span>
    <span>return</span> user
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><a href="https://memcached.org/" target="_blank" rel="noopener noreferrer">Memcached</a> 通常用这种方式使用。</p>
<p>添加到缓存中的数据读取速度很快。缓存模式也称为延迟加载。只缓存所请求的数据，这避免了没有被请求的数据占满了缓存空间。</p>
<h5 id="缓存的缺点" tabindex="-1"> 缓存的缺点：</h5>
<ul>
<li>请求的数据如果不在缓存中就需要经过三个步骤来获取数据，这会导致明显的延迟。</li>
<li>如果数据库中的数据更新了会导致缓存中的数据过时。这个问题需要通过设置  TTL 强制更新缓存或者直写模式来缓解这种情况。</li>
<li>当一个节点出现故障的时候，它将会被一个新的节点替代，这增加了延迟的时间。</li>
</ul>
<h4 id="直写模式" tabindex="-1"> 直写模式</h4>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/u7NGom.png">
  <i>Content not supported</i>
  <strong><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/">资料来源：可扩展性、可用性、稳定性、模式</a></strong>
</p>
<p>应用使用缓存作为主要的数据存储，将数据读写到缓存中，而缓存负责从数据库中读写数据。</p>
<ul>
<li>应用向缓存中添加/更新数据</li>
<li>缓存同步地写入数据存储</li>
<li>返回所需内容</li>
</ul>
<p>应用代码：</p>
<div><pre><code>set_user(12345, {"foo":"bar"})
</code></pre><div aria-hidden="true"><div></div></div></div><p>缓存代码：</p>
<div><pre><code><span>def</span> <span>set_user</span><span>(</span>user_id<span>,</span> values<span>)</span><span>:</span>
    user <span>=</span> db<span>.</span>query<span>(</span><span>"UPDATE Users WHERE id = {0}"</span><span>,</span> user_id<span>,</span> values<span>)</span>
    cache<span>.</span><span>set</span><span>(</span>user_id<span>,</span> user<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>由于存写操作所以直写模式整体是一种很慢的操作，但是读取刚写入的数据很快。相比读取数据，用户通常比较能接受更新数据时速度较慢。缓存中的数据不会过时。</p>
<h5 id="直写模式的缺点" tabindex="-1"> 直写模式的缺点：</h5>
<ul>
<li>由于故障或者缩放而创建的新的节点，新的节点不会缓存，直到数据库更新为止。缓存应用直写模式可以缓解这个问题。</li>
<li>写入的大多数数据可能永远都不会被读取，用 TTL 可以最小化这种情况的出现。</li>
</ul>
<h4 id="回写模式" tabindex="-1"> 回写模式</h4>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/H3SU47.png">
  <i>Content not supported</i>
  <strong><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/">资料来源：可扩展性、可用性、稳定性、模式</a></strong>
</p>
<p>在回写模式中，应用执行以下操作：</p>
<ul>
<li>在缓存中增加或者更新条目</li>
<li>异步写入数据，提高写入性能。</li>
</ul>
<h5 id="回写模式的缺点" tabindex="-1"> 回写模式的缺点：</h5>
<ul>
<li>缓存可能在其内容成功存储之前丢失数据。</li>
<li>执行直写模式比缓存或者回写模式更复杂。</li>
</ul>
<h4 id="刷新" tabindex="-1"> 刷新</h4>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/U2BLz3.png">
  <i>Content not supported</i>
  <strong><a href=http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast>资料来源：从缓存到内存数据网格</a></strong>
</p>
<p>你可以将缓存配置成在到期之前自动刷新最近访问过的内容。</p>
<p>如果缓存可以准确预测将来可能请求哪些数据，那么刷新可能会导致延迟与读取时间的降低。</p>
<h5 id="刷新的缺点" tabindex="-1"> 刷新的缺点：</h5>
<ul>
<li>不能准确预测到未来需要用到的数据可能会导致性能不如不使用刷新。</li>
</ul>
<h3 id="缓存的缺点-1" tabindex="-1"> 缓存的缺点：</h3>
<ul>
<li>需要保持缓存和真实数据源之间的一致性，比如数据库根据<a href="https://en.wikipedia.org/wiki/Cache_algorithms" target="_blank" rel="noopener noreferrer">缓存无效</a>。</li>
<li>需要改变应用程序比如增加 Redis 或者 memcached。</li>
<li>无效缓存是个难题，什么时候更新缓存是与之相关的复杂问题。</li>
</ul>
<h3 id="相关资源和延伸阅读-1" tabindex="-1"> 相关资源和延伸阅读</h3>
<ul>
<li><a href="http://www.slideshare.net/tmatyashovsky/from-cache-to-in-memory-data-grid-introduction-to-hazelcast" target="_blank" rel="noopener noreferrer">从缓存到内存数据</a></li>
<li><a href="http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html" target="_blank" rel="noopener noreferrer">可扩展系统设计模式</a></li>
<li><a href="http://lethain.com/introduction-to-architecting-systems-for-scale/" target="_blank" rel="noopener noreferrer">可缩放系统构架介绍</a></li>
<li><a href="http://www.slideshare.net/jboner/scalability-availability-stability-patterns/" target="_blank" rel="noopener noreferrer">可扩展性，可用性，稳定性和模式</a></li>
<li><a href="http://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache" target="_blank" rel="noopener noreferrer">可扩展性</a></li>
<li><a href="http://docs.aws.amazon.com/AmazonElastiCache/latest/UserGuide/Strategies.html" target="_blank" rel="noopener noreferrer">AWS ElastiCache 策略</a></li>
<li><a href="https://en.wikipedia.org/wiki/Cache_(computing)" target="_blank" rel="noopener noreferrer">维基百科</a></li>
</ul>
<h2 id="异步" tabindex="-1"> 异步</h2>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/GeFaAf.png">
  <i>Content not supported</i>
  <strong><a href=http://lethain.com/introduction-to-architecting-systems-for-scale/#platform_layer>资料来源：可缩放系统构架介绍</a></strong>
</p>
<p>异步工作流有助于减少那些原本顺序执行的请求时间。它们可以通过提前进行一些耗时的工作来帮助减少请求时间，比如定期汇总数据。</p>
<h3 id="消息队列" tabindex="-1"> 消息队列</h3>
<p>消息队列接收，保留和传递消息。如果按顺序执行操作太慢的话，你可以使用有以下工作流的消息队列：</p>
<ul>
<li>应用程序将作业发布到队列，然后通知用户作业状态</li>
<li>一个 worker 从队列中取出该作业，对其进行处理，然后显示该作业完成</li>
</ul>
<p>不去阻塞用户操作，作业在后台处理。在此期间，客户端可能会进行一些处理使得看上去像是任务已经完成了。例如，如果要发送一条推文，推文可能会马上出现在你的时间线上，但是可能需要一些时间才能将你的推文推送到你的所有关注者那里去。</p>
<p><strong>Redis</strong> 是一个令人满意的简单的消息代理，但是消息有可能会丢失。</p>
<p><strong>RabbitMQ</strong> 很受欢迎但是要求你适应「AMQP」协议并且管理你自己的节点。</p>
<p><strong>Amazon SQS</strong> 是被托管的，但可能具有高延迟，并且消息可能会被传送两次。</p>
<h3 id="任务队列" tabindex="-1"> 任务队列</h3>
<p>任务队列接收任务及其相关数据，运行它们，然后传递其结果。 它们可以支持调度，并可用于在后台运行计算密集型作业。</p>
<p><strong>Celery</strong> 支持调度，主要是用 Python 开发的。</p>
<h3 id="背压" tabindex="-1"> 背压</h3>
<p>如果队列开始明显增长，那么队列大小可能会超过内存大小，导致高速缓存未命中，磁盘读取，甚至性能更慢。<a href="http://mechanical-sympathy.blogspot.com/2012/05/apply-back-pressure-when-overloaded.html" target="_blank" rel="noopener noreferrer">背压</a>可以通过限制队列大小来帮助我们，从而为队列中的作业保持高吞吐率和良好的响应时间。一旦队列填满，客户端将得到服务器忙或者 HTTP 503 状态码，以便稍后重试。客户端可以在稍后时间重试该请求，也许是<a href="https://en.wikipedia.org/wiki/Exponential_backoff" target="_blank" rel="noopener noreferrer">指数退避</a>。</p>
<h3 id="异步的缺点" tabindex="-1"> 异步的缺点：</h3>
<ul>
<li>简单的计算和实时工作流等用例可能更适用于同步操作，因为引入队列可能会增加延迟和复杂性。</li>
</ul>
<h3 id="相关资源和延伸阅读-2" tabindex="-1"> 相关资源和延伸阅读</h3>
<ul>
<li><a href="https://www.youtube.com/watch?v=1KRYH75wgy4" target="_blank" rel="noopener noreferrer">这是一个数字游戏</a></li>
<li><a href="http://mechanical-sympathy.blogspot.com/2012/05/apply-back-pressure-when-overloaded.html" target="_blank" rel="noopener noreferrer">超载时应用背压</a></li>
<li><a href="https://en.wikipedia.org/wiki/Little%27s_law" target="_blank" rel="noopener noreferrer">利特尔法则</a></li>
<li><a href="https://www.quora.com/What-is-the-difference-between-a-message-queue-and-a-task-queue-Why-would-a-task-queue-require-a-message-broker-like-RabbitMQ-Redis-Celery-or-IronMQ-to-function" target="_blank" rel="noopener noreferrer">消息队列与任务队列有什么区别？</a></li>
</ul>
<h2 id="通讯" tabindex="-1"> 通讯</h2>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/qTBwox.jpg">
  <i>Content not supported</i>
  <strong><a href=http://www.escotal.com/osilayer.html>资料来源：OSI 7层模型</a></strong>
</p>
<h3 id="超文本传输协议-http" tabindex="-1"> 超文本传输协议（HTTP）</h3>
<p>HTTP 是一种在客户端和服务器之间编码和传输数据的方法。它是一个请求/响应协议：客户端和服务端针对相关内容和完成状态信息的请求和响应。HTTP 是独立的，允许请求和响应流经许多执行负载均衡，缓存，加密和压缩的中间路由器和服务器。</p>
<p>一个基本的 HTTP 请求由一个动词（方法）和一个资源（端点）组成。 以下是常见的 HTTP 动词：</p>
<table>
<thead>
<tr>
<th>动词</th>
<th>描述</th>
<th>*幂等</th>
<th>安全性</th>
<th>可缓存</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>读取资源</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td>POST</td>
<td>创建资源或触发处理数据的进程</td>
<td>No</td>
<td>No</td>
<td>Yes，如果回应包含刷新信息</td>
</tr>
<tr>
<td>PUT</td>
<td>创建或替换资源</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td>PATCH</td>
<td>部分更新资源</td>
<td>No</td>
<td>No</td>
<td>Yes，如果回应包含刷新信息</td>
</tr>
<tr>
<td>DELETE</td>
<td>删除资源</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
</tr>
</tbody>
</table>
<p><strong>多次执行不会产生不同的结果</strong>。</p>
<p>HTTP 是依赖于较低级协议（如 <strong>TCP</strong> 和 <strong>UDP</strong>）的应用层协议。</p>
<h4 id="来源及延伸阅读-http" tabindex="-1"> 来源及延伸阅读：HTTP</h4>
<ul>
<li><a href="https://www.quora.com/What-is-the-difference-between-HTTP-protocol-and-TCP-protocol" target="_blank" rel="noopener noreferrer">README</a> +</li>
<li><a href="https://www.nginx.com/resources/glossary/http/" target="_blank" rel="noopener noreferrer">HTTP 是什么？</a></li>
<li><a href="https://www.quora.com/What-is-the-difference-between-HTTP-protocol-and-TCP-protocol" target="_blank" rel="noopener noreferrer">HTTP 和 TCP 的区别</a></li>
<li><a href="https://laracasts.com/discuss/channels/general-discussion/whats-the-differences-between-put-and-patch?page=1" target="_blank" rel="noopener noreferrer">PUT 和 PATCH 的区别</a></li>
</ul>
<h3 id="传输控制协议-tcp" tabindex="-1"> 传输控制协议（TCP）</h3>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/QI2nvi.jpg">
  <i>Content not supported</i>
  <strong><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1/">资料来源：如何制作多人游戏</a></strong>
</p>
<p>TCP 是通过 <a href="https://en.wikipedia.org/wiki/Internet_Protocol" target="_blank" rel="noopener noreferrer">IP 网络</a>的面向连接的协议。 使用<a href="https://en.wikipedia.org/wiki/Handshaking" target="_blank" rel="noopener noreferrer">握手</a>建立和断开连接。 发送的所有数据包保证以原始顺序到达目的地，用以下措施保证数据包不被损坏：</p>
<ul>
<li>每个数据包的序列号和<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Checksum_computation" target="_blank" rel="noopener noreferrer">校验码</a>。</li>
<li><a href="https://en.wikipedia.org/wiki/Acknowledgement_(data_networks)" target="_blank" rel="noopener noreferrer">确认包</a>和自动重传</li>
</ul>
<p>如果发送者没有收到正确的响应，它将重新发送数据包。如果多次超时，连接就会断开。TCP 实行<a href="https://en.wikipedia.org/wiki/Flow_control_(data)" target="_blank" rel="noopener noreferrer">流量控制</a>和<a href="https://en.wikipedia.org/wiki/Network_congestion#Congestion_control" target="_blank" rel="noopener noreferrer">拥塞控制</a>。这些确保措施会导致延迟，而且通常导致传输效率比 UDP 低。</p>
<p>为了确保高吞吐量，Web 服务器可以保持大量的 TCP 连接，从而导致高内存使用。在 Web 服务器线程间拥有大量开放连接可能开销巨大，消耗资源过多，也就是说，一个  服务器。<a href="https://en.wikipedia.org/wiki/Connection_pool" target="_blank" rel="noopener noreferrer">连接池</a> 可以帮助除了在适用的情况下切换到 UDP。</p>
<p>TCP 对于需要高可靠性但时间紧迫的应用程序很有用。比如包括 Web 服务器，数据库信息，SMTP，FTP 和 SSH。</p>
<p>以下情况使用 TCP 代替 UDP：</p>
<ul>
<li>你需要数据完好无损。</li>
<li>你想对网络吞吐量自动进行最佳评估。</li>
</ul>
<h3 id="用户数据报协议-udp" tabindex="-1"> 用户数据报协议（UDP）</h3>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/oUNCQg.jpg">
  <i>Content not supported</i>
  <strong><a href="http://www.wildbunny.co.uk/blog/2012/10/09/how-to-make-a-multi-player-game-part-1">资料来源：如何制作多人游戏</a></strong>
</p>
<p>UDP 是无连接的。数据报（类似于数据包）只在数据报级别有保证。数据报可能会无序的到达目的地，也有可能会遗失。UDP 不支持拥塞控制。虽然不如 TCP 那样有保证，但 UDP 通常效率更高。</p>
<p>UDP 可以通过广播将数据报发送至子网内的所有设备。这对 <a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol" target="_blank" rel="noopener noreferrer">DHCP</a> 很有用，因为子网内的设备还没有分配 IP 地址，而 IP 对于 TCP 是必须的。</p>
<p>UDP 可靠性更低但适合用在网络电话、视频聊天，流媒体和实时多人游戏上。</p>
<p>以下情况使用 UDP 代替 TCP：</p>
<ul>
<li>你需要低延迟</li>
<li>相对于数据丢失更糟的是数据延迟</li>
<li>你想实现自己的错误校正方法</li>
</ul>
<h4 id="来源及延伸阅读-tcp-与-udp" tabindex="-1"> 来源及延伸阅读：TCP 与 UDP</h4>
<ul>
<li><a href="http://gafferongames.com/networking-for-game-programmers/udp-vs-tcp/" target="_blank" rel="noopener noreferrer">游戏编程的网络</a></li>
<li><a href="http://www.cyberciti.biz/faq/key-differences-between-tcp-and-udp-protocols/" target="_blank" rel="noopener noreferrer">TCP 与 UDP 的关键区别</a></li>
<li><a href="http://stackoverflow.com/questions/5970383/difference-between-tcp-and-udp" target="_blank" rel="noopener noreferrer">TCP 与 UDP 的不同</a></li>
<li><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol" target="_blank" rel="noopener noreferrer">传输控制协议</a></li>
<li><a href="https://en.wikipedia.org/wiki/User_Datagram_Protocol" target="_blank" rel="noopener noreferrer">用户数据报协议</a></li>
<li><a href="http://www.cs.bu.edu/~jappavoo/jappavoo.github.com/451/papers/memcache-fb.pdf" target="_blank" rel="noopener noreferrer">Memcache 在 Facebook 的扩展</a></li>
</ul>
<h3 id="远程过程调用协议-rpc" tabindex="-1"> 远程过程调用协议（RPC）</h3>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/ZY4SYg.png">
  <i>Content not supported</i>
  <strong><a href="http://www.puncsky.com/blog/2016/02/14/crack-the-system-design-interview">Source: Crack the system design interview</a></strong>
</p>
<p>在 RPC 中，客户端会去调用另一个地址空间（通常是一个远程服务器）里的方法。调用代码看起来就像是调用的是一个本地方法，客户端和服务器交互的具体过程被抽象。远程调用相对于本地调用一般较慢而且可靠性更差，因此区分两者是有帮助的。热门的 RPC 框架包括 <a href="https://developers.google.com/protocol-buffers/" target="_blank" rel="noopener noreferrer">Protobuf</a>、<a href="https://thrift.apache.org/" target="_blank" rel="noopener noreferrer">Thrift</a> 和 <a href="https://avro.apache.org/docs/current/" target="_blank" rel="noopener noreferrer">Avro</a>。</p>
<p>RPC 是一个“请求-响应”协议：</p>
<ul>
<li><strong>客户端程序</strong> ── 调用客户端存根程序。就像调用本地方法一样，参数会被压入栈中。</li>
<li><strong>客户端 stub 程序</strong> ── 将请求过程的 id 和参数打包进请求信息中。</li>
<li><strong>客户端通信模块</strong> ── 将信息从客户端发送至服务端。</li>
<li><strong>服务端通信模块</strong> ── 将接受的包传给服务端存根程序。</li>
<li><strong>服务端 stub 程序</strong> ── 将结果解包，依据过程 id 调用服务端方法并将参数传递过去。</li>
</ul>
<p>RPC 调用示例：</p>
<div><pre><code>GET /someoperation?data=anId

POST /anotheroperation
{
  "data":"anId";
  "anotherdata": "another value"
}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>RPC 专注于暴露方法。RPC 通常用于处理内部通讯的性能问题，这样你可以手动处理本地调用以更好的适应你的情况。</p>
<p>当以下情况时选择本地库（也就是 SDK）：</p>
<ul>
<li>你知道你的目标平台。</li>
<li>你想控制如何访问你的“逻辑”。</li>
<li>你想对发生在你的库中的错误进行控制。</li>
<li>性能和终端用户体验是你最关心的事。</li>
</ul>
<p>遵循 <strong>REST</strong> 的 HTTP API 往往更适用于公共 API。</p>
<h4 id="缺点-rpc" tabindex="-1"> 缺点：RPC</h4>
<ul>
<li>RPC 客户端与服务实现捆绑地很紧密。</li>
<li>一个新的 API 必须在每一个操作或者用例中定义。</li>
<li>RPC 很难调试。</li>
<li>你可能没办法很方便的去修改现有的技术。举个例子，如果你希望在 <a href="http://www.squid-cache.org/" target="_blank" rel="noopener noreferrer">Squid</a> 这样的缓存服务器上确保 <a href="http://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/" target="_blank" rel="noopener noreferrer">RPC 被正确缓存</a>的话可能需要一些额外的努力了。</li>
</ul>
<h3 id="表述性状态转移-rest" tabindex="-1"> 表述性状态转移（REST）</h3>
<p>REST 是一种强制的客户端/服务端架构设计模型，客户端基于服务端管理的一系列资源操作。服务端提供修改或获取资源的接口。所有的通信必须是无状态和可缓存的。</p>
<p>RESTful 接口有四条规则：</p>
<ul>
<li><strong>标志资源（HTTP 里的 URI）</strong> ── 无论什么操作都使用同一个 URI。</li>
<li><strong>表示的改变（HTTP 的动作）</strong> ── 使用动作, headers 和 body。</li>
<li><strong>可自我描述的错误信息（HTTP 中的 status code）</strong> ── 使用状态码，不要重新造轮子。</li>
<li><strong><a href="http://restcookbook.com/Basics/hateoas/" target="_blank" rel="noopener noreferrer">HATEOAS</a>（HTTP 中的 HTML 接口）</strong> ── 你的 web 服务器应该能够通过浏览器访问。</li>
</ul>
<p>REST 请求的例子：</p>
<div><pre><code>GET /someresources/anId

PUT /someresources/anId
{"anotherdata": "another value"}
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>REST 关注于暴露数据。它减少了客户端／服务端的耦合程度，经常用于公共 HTTP API 接口设计。REST 使用更通常与规范化的方法来通过 URI 暴露资源，<a href="https://github.com/for-GET/know-your-http-well/blob/master/headers.md" target="_blank" rel="noopener noreferrer">通过 header 来表述</a>并通过 GET、POST、PUT、DELETE 和 PATCH 这些动作来进行操作。因为无状态的特性，REST 易于横向扩展和隔离。</p>
<h4 id="缺点-rest" tabindex="-1"> 缺点：REST</h4>
<ul>
<li>由于 REST 将重点放在暴露数据，所以当资源不是自然组织的或者结构复杂的时候它可能无法很好的适应。举个例子，返回过去一小时中与特定事件集匹配的更新记录这种操作就很难表示为路径。使用 REST，可能会使用 URI 路径，查询参数和可能的请求体来实现。</li>
<li>REST 一般依赖几个动作（GET、POST、PUT、DELETE 和 PATCH），但有时候仅仅这些没法满足你的需要。举个例子，将过期的文档移动到归档文件夹里去，这样的操作可能没法简单的用上面这几个 verbs 表达。</li>
<li>为了渲染单个页面，获取被嵌套在层级结构中的复杂资源需要客户端，服务器之间多次往返通信。例如，获取博客内容及其关联评论。对于使用不确定网络环境的移动应用来说，这些多次往返通信是非常麻烦的。</li>
<li>随着时间的推移，更多的字段可能会被添加到 API 响应中，较旧的客户端将会接收到所有新的数据字段，即使是那些它们不需要的字段，结果它会增加负载大小并引起更大的延迟。</li>
</ul>
<h3 id="rpc-与-rest-比较" tabindex="-1"> RPC 与 REST 比较</h3>
<table>
<thead>
<tr>
<th>操作</th>
<th>RPC</th>
<th>REST</th>
</tr>
</thead>
<tbody>
<tr>
<td>注册</td>
<td><strong>POST</strong> /signup</td>
<td><strong>POST</strong> /persons</td>
</tr>
<tr>
<td>注销</td>
<td><strong>POST</strong> /resign<i>Content not supported</i>{<i>Content not supported</i>&quot;personid&quot;: &quot;1234&quot;<i>Content not supported</i>}</td>
<td><strong>DELETE</strong> /persons/1234</td>
</tr>
<tr>
<td>读取用户信息</td>
<td><strong>GET</strong> /readPerson?personid=1234</td>
<td><strong>GET</strong> /persons/1234</td>
</tr>
<tr>
<td>读取用户物品列表</td>
<td><strong>GET</strong> /readUsersItemsList?personid=1234</td>
<td><strong>GET</strong> /persons/1234/items</td>
</tr>
<tr>
<td>向用户物品列表添加一项</td>
<td><strong>POST</strong> /addItemToUsersItemsList<i>Content not supported</i>{<i>Content not supported</i>&quot;personid&quot;: &quot;1234&quot;;<i>Content not supported</i>&quot;itemid&quot;: &quot;456&quot;<i>Content not supported</i>}</td>
<td><strong>POST</strong> /persons/1234/items<i>Content not supported</i>{<i>Content not supported</i>&quot;itemid&quot;: &quot;456&quot;<i>Content not supported</i>}</td>
</tr>
<tr>
<td>更新一个物品</td>
<td><strong>POST</strong> /modifyItem<i>Content not supported</i>{<i>Content not supported</i>&quot;itemid&quot;: &quot;456&quot;;<i>Content not supported</i>&quot;key&quot;: &quot;value&quot;<i>Content not supported</i>}</td>
<td><strong>PUT</strong> /items/456<i>Content not supported</i>{<i>Content not supported</i>&quot;key&quot;: &quot;value&quot;<i>Content not supported</i>}</td>
</tr>
<tr>
<td>删除一个物品</td>
<td><strong>POST</strong> /removeItem<i>Content not supported</i>{<i>Content not supported</i>&quot;itemid&quot;: &quot;456&quot;<i>Content not supported</i>}</td>
<td><strong>DELETE</strong> /items/456</td>
</tr>
</tbody>
</table>
<p align="center">
  <strong><a href="https://apihandyman.io/do-you-really-know-why-you-prefer-rest-over-rpc">资料来源：你真的知道你为什么更喜欢 REST 而不是 RPC 吗</a></strong>
</p>
<h4 id="来源及延伸阅读-rest-与-rpc" tabindex="-1"> 来源及延伸阅读：REST 与 RPC</h4>
<ul>
<li><a href="https://apihandyman.io/do-you-really-know-why-you-prefer-rest-over-rpc/" target="_blank" rel="noopener noreferrer">你真的知道你为什么更喜欢 REST 而不是 RPC 吗</a></li>
<li><a href="http://programmers.stackexchange.com/a/181186" target="_blank" rel="noopener noreferrer">什么时候 RPC 比 REST 更合适？</a></li>
<li><a href="http://stackoverflow.com/questions/15056878/rest-vs-json-rpc" target="_blank" rel="noopener noreferrer">REST vs JSON-RPC</a></li>
<li><a href="http://etherealbits.com/2012/12/debunking-the-myths-of-rpc-rest/" target="_blank" rel="noopener noreferrer">揭开 RPC 和 REST 的神秘面纱</a></li>
<li><a href="https://www.quora.com/What-are-the-drawbacks-of-using-RESTful-APIs" target="_blank" rel="noopener noreferrer">使用 REST 的缺点是什么</a></li>
<li><a href="http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview" target="_blank" rel="noopener noreferrer">破解系统设计面试</a></li>
<li><a href="https://code.facebook.com/posts/1468950976659943/" target="_blank" rel="noopener noreferrer">Thrift</a></li>
<li><a href="http://arstechnica.com/civis/viewtopic.php?t=1190508" target="_blank" rel="noopener noreferrer">为什么在内部使用 REST 而不是 RPC</a></li>
</ul>
<h2 id="安全" tabindex="-1"> 安全</h2>
<p>这一部分需要更多内容。！</p>
<p>安全是一个宽泛的话题。除非你有相当的经验、安全方面背景或者正在申请的职位要求安全知识，你不需要了解安全基础知识以外的内容：</p>
<ul>
<li>在运输和等待过程中加密</li>
<li>对所有的用户输入和从用户那里发来的参数进行处理以防止 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noopener noreferrer">XSS</a> 和 <a href="https://en.wikipedia.org/wiki/SQL_injection" target="_blank" rel="noopener noreferrer">SQL 注入</a>。</li>
<li>使用参数化的查询来防止 SQL 注入。</li>
<li>使用<a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege" target="_blank" rel="noopener noreferrer">最小权限原则</a>。</li>
</ul>
<h3 id="来源及延伸阅读-12" tabindex="-1"> 来源及延伸阅读</h3>
<ul>
<li><a href="https://github.com/FallibleInc/security-guide-for-developers" target="_blank" rel="noopener noreferrer">为开发者准备的安全引导</a></li>
<li><a href="https://www.owasp.org/index.php/OWASP_Top_Ten_Cheat_Sheet" target="_blank" rel="noopener noreferrer">OWASP top ten</a></li>
</ul>
<h2 id="附录" tabindex="-1"> 附录</h2>
<p>一些时候你会被要求做出保守估计。比如，你可能需要估计从磁盘中生成 100 张图片的缩略图需要的时间或者一个数据结构需要多少的内存。<strong>2 的次方表</strong>和<strong>每个开发者都需要知道的一些时间数据</strong>（译注：OSChina 上有这篇文章的<a href="https://www.oschina.net/news/30009/every-programmer-should-know" target="_blank" rel="noopener noreferrer">译文</a>）都是一些很方便的参考资料。</p>
<h3 id="_2-的次方表" tabindex="-1"> 2 的次方表</h3>
<div><pre><code>Power           Exact Value         Approx Value        Bytes
---------------------------------------------------------------
7                             128
8                             256
10                           1024   1 thousand           1 KB
16                         65,536                       64 KB
20                      1,048,576   1 million            1 MB
30                  1,073,741,824   1 billion            1 GB
32                  4,294,967,296                        4 GB
40              1,099,511,627,776   1 trillion           1 TB
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id="来源及延伸阅读-13" tabindex="-1"> 来源及延伸阅读</h4>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Power_of_two" target="_blank" rel="noopener noreferrer">2 的次方</a></li>
</ul>
<h3 id="每个程序员都应该知道的延迟数" tabindex="-1"> 每个程序员都应该知道的延迟数</h3>
<div><pre><code>Latency Comparison Numbers
--------------------------
L1 cache reference                           0.5 ns
Branch mispredict                            5   ns
L2 cache reference                           7   ns                      14x L1 cache
Mutex lock/unlock                           25   ns
Main memory reference                      100   ns                      20x L2 cache, 200x L1 cache
Compress 1K bytes with Zippy            10,000   ns       10 us
Send 1 KB bytes over 1 Gbps network     10,000   ns       10 us
Read 4 KB randomly from SSD*           150,000   ns      150 us          ~1GB/sec SSD
Read 1 MB sequentially from memory     250,000   ns      250 us
Round trip within same datacenter      500,000   ns      500 us
Read 1 MB sequentially from SSD*     1,000,000   ns    1,000 us    1 ms  ~1GB/sec SSD, 4X memory
Disk seek                           10,000,000   ns   10,000 us   10 ms  20x datacenter roundtrip
Read 1 MB sequentially from 1 Gbps  10,000,000   ns   10,000 us   10 ms  40x memory, 10X SSD
Read 1 MB sequentially from disk    30,000,000   ns   30,000 us   30 ms 120x memory, 30X SSD
Send packet CA->Netherlands->CA    150,000,000   ns  150,000 us  150 ms

Notes
-----
1 ns = 10^-9 seconds
1 us = 10^-6 seconds = 1,000 ns
1 ms = 10^-3 seconds = 1,000 us = 1,000,000 ns
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>基于上述数字的指标：</p>
<ul>
<li>从磁盘以 30 MB/s 的速度顺序读取</li>
<li>以 100 MB/s 从 1 Gbps 的以太网顺序读取</li>
<li>从 SSD 以 1 GB/s 的速度读取</li>
<li>以 4 GB/s 的速度从主存读取</li>
<li>每秒能绕地球 6-7 圈</li>
<li>数据中心内每秒有 2,000 次往返</li>
</ul>
<h4 id="延迟数可视化" tabindex="-1"> 延迟数可视化</h4>
<img src="https://camo.githubusercontent.com/77f72259e1eb58596b564d1ad823af1853bc60a3/687474703a2f2f692e696d6775722e636f6d2f6b307431652e706e67">
<h4 id="来源及延伸阅读-14" tabindex="-1"> 来源及延伸阅读</h4>
<ul>
<li><a href="https://gist.github.com/jboner/2841832" target="_blank" rel="noopener noreferrer">每个程序员都应该知道的延迟数 — 1</a></li>
<li><a href="https://gist.github.com/hellerbarde/2843375" target="_blank" rel="noopener noreferrer">每个程序员都应该知道的延迟数 — 2</a></li>
<li><a href="http://www.cs.cornell.edu/projects/ladis2009/talks/dean-keynote-ladis2009.pdf" target="_blank" rel="noopener noreferrer">关于建设大型分布式系统的的设计方案、课程和建议</a></li>
<li><a href="https://static.googleusercontent.com/media/research.google.com/en//people/jeff/stanford-295-talk.pdf" target="_blank" rel="noopener noreferrer">关于建设大型可拓展分布式系统的软件工程咨询</a></li>
</ul>
<h3 id="其它的系统设计面试题" tabindex="-1"> 其它的系统设计面试题</h3>
<blockquote>
<p>常见的系统设计面试问题，给出了如何解决的方案链接</p>
</blockquote>
<table>
<thead>
<tr>
<th>问题</th>
<th>引用</th>
</tr>
</thead>
<tbody>
<tr>
<td>设计类似于 Dropbox 的文件同步服务</td>
<td><a href="https://www.youtube.com/watch?v=PE4gwstWhmc" target="_blank" rel="noopener noreferrer">youtube.com</a></td>
</tr>
<tr>
<td>设计类似于 Google 的搜索引擎</td>
<td><a href="http://queue.acm.org/detail.cfm?id=988407" target="_blank" rel="noopener noreferrer">queue.acm.org</a><i>Content not supported</i><a href="http://programmers.stackexchange.com/questions/38324/interview-question-how-would-you-implement-google-search" target="_blank" rel="noopener noreferrer">stackexchange.com</a><i>Content not supported</i><a href="http://www.ardendertat.com/2012/01/11/implementing-search-engines/" target="_blank" rel="noopener noreferrer">ardendertat.com</a><i>Content not supported</i><a href="http://infolab.stanford.edu/~backrub/google.html" target="_blank" rel="noopener noreferrer">stanford.edu</a></td>
</tr>
<tr>
<td>设计类似于 Google 的可扩展网络爬虫</td>
<td><a href="https://www.quora.com/How-can-I-build-a-web-crawler-from-scratch" target="_blank" rel="noopener noreferrer">quora.com</a></td>
</tr>
<tr>
<td>设计 Google 文档</td>
<td><a href="https://code.google.com/p/google-mobwrite/" target="_blank" rel="noopener noreferrer">code.google.com</a><i>Content not supported</i><a href="https://neil.fraser.name/writing/sync/" target="_blank" rel="noopener noreferrer">neil.fraser.name</a></td>
</tr>
<tr>
<td>设计类似 Redis 的键值存储</td>
<td><a href="http://www.slideshare.net/dvirsky/introduction-to-redis" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td>设计类似 Memcached 的缓存系统</td>
<td><a href="http://www.slideshare.net/oemebamo/introduction-to-memcached" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td>设计类似亚马逊的推荐系统</td>
<td><a href="http://tech.hulu.com/blog/2011/09/19/recommendation-system.html" target="_blank" rel="noopener noreferrer">hulu.com</a><i>Content not supported</i><a href="http://ijcai13.org/files/tutorial_slides/td3.pdf" target="_blank" rel="noopener noreferrer">ijcai13.org</a></td>
</tr>
<tr>
<td>设计类似 Bitly 的短链接系统</td>
<td><a href="http://n00tc0d3r.blogspot.com/" target="_blank" rel="noopener noreferrer">n00tc0d3r.blogspot.com</a></td>
</tr>
<tr>
<td>设计类似 WhatsApp 的聊天应用</td>
<td><a href="http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html" target="_blank" rel="noopener noreferrer">highscalability.com</a></td>
</tr>
<tr>
<td>设计类似 Instagram 的图片分享系统</td>
<td><a href="http://highscalability.com/flickr-architecture" target="_blank" rel="noopener noreferrer">highscalability.com</a><i>Content not supported</i><a href="http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html" target="_blank" rel="noopener noreferrer">highscalability.com</a></td>
</tr>
<tr>
<td>设计 Facebook 的新闻推荐方法</td>
<td><a href="http://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed" target="_blank" rel="noopener noreferrer">quora.com</a><i>Content not supported</i><a href="http://www.quora.com/Activity-Streams/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed" target="_blank" rel="noopener noreferrer">quora.com</a><i>Content not supported</i><a href="http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td>设计 Facebook 的时间线系统</td>
<td><a href="https://www.facebook.com/note.php?note_id=10150468255628920" target="_blank" rel="noopener noreferrer">facebook.com</a><i>Content not supported</i><a href="http://highscalability.com/blog/2012/1/23/facebook-timeline-brought-to-you-by-the-power-of-denormaliza.html" target="_blank" rel="noopener noreferrer">highscalability.com</a></td>
</tr>
<tr>
<td>设计 Facebook 的聊天系统</td>
<td><a href="http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf" target="_blank" rel="noopener noreferrer">erlang-factory.com</a><i>Content not supported</i><a href="https://www.facebook.com/note.php?note_id=14218138919&amp;id=9445547199&amp;index=0" target="_blank" rel="noopener noreferrer">facebook.com</a></td>
</tr>
<tr>
<td>设计类似 Facebook 的图表搜索系统</td>
<td><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-building-out-the-infrastructure-for-graph-search/10151347573598920" target="_blank" rel="noopener noreferrer">facebook.com</a><i>Content not supported</i><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-indexing-and-ranking-in-graph-search/10151361720763920" target="_blank" rel="noopener noreferrer">facebook.com</a><i>Content not supported</i><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-the-natural-language-interface-of-graph-search/10151432733048920" target="_blank" rel="noopener noreferrer">facebook.com</a></td>
</tr>
<tr>
<td>设计类似 CloudFlare 的内容传递网络</td>
<td><a href="http://repository.cmu.edu/cgi/viewcontent.cgi?article=2112&amp;context=compsci" target="_blank" rel="noopener noreferrer">cmu.edu</a></td>
</tr>
<tr>
<td>设计类似 Twitter 的热门话题系统</td>
<td><a href="http://www.michael-noll.com/blog/2013/01/18/implementing-real-time-trending-topics-in-storm/" target="_blank" rel="noopener noreferrer">michael-noll.com</a><i>Content not supported</i><a href="http://snikolov.wordpress.com/2012/11/14/early-detection-of-twitter-trends/" target="_blank" rel="noopener noreferrer">snikolov .wordpress.com</a></td>
</tr>
<tr>
<td>设计一个随机 ID 生成系统</td>
<td><a href="https://blog.twitter.com/2010/announcing-snowflake" target="_blank" rel="noopener noreferrer">blog.twitter.com</a><i>Content not supported</i><a href="https://github.com/twitter/snowflake/" target="_blank" rel="noopener noreferrer">github.com</a></td>
</tr>
<tr>
<td>返回一定时间段内次数前 k 高的请求</td>
<td><a href="https://icmi.cs.ucsb.edu/research/tech_reports/reports/2005-23.pdf" target="_blank" rel="noopener noreferrer">ucsb.edu</a><i>Content not supported</i><a href="http://davis.wpi.edu/xmdv/docs/EDBT11-diyang.pdf" target="_blank" rel="noopener noreferrer">wpi.edu</a></td>
</tr>
<tr>
<td>设计一个数据源于多个数据中心的服务系统</td>
<td><a href="http://highscalability.com/blog/2009/8/24/how-google-serves-data-from-multiple-datacenters.html" target="_blank" rel="noopener noreferrer">highscalability.com</a></td>
</tr>
<tr>
<td>设计一个多人网络卡牌游戏</td>
<td><a href="https://web.archive.org/web/20180929181117/http://www.indieflashblog.com/how-to-create-an-asynchronous-multiplayer-game.html" target="_blank" rel="noopener noreferrer">indieflashblog.com</a><i>Content not supported</i><a href="http://buildnewgames.com/real-time-multiplayer/" target="_blank" rel="noopener noreferrer">buildnewgames.com</a></td>
</tr>
<tr>
<td>设计一个垃圾回收系统</td>
<td><a href="http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/" target="_blank" rel="noopener noreferrer">stuffwithstuff.com</a><i>Content not supported</i><a href="http://courses.cs.washington.edu/courses/csep521/07wi/prj/rick.pdf" target="_blank" rel="noopener noreferrer">washington.edu</a></td>
</tr>
<tr>
<td>添加更多的系统设计问题</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="真实架构" tabindex="-1"> 真实架构</h3>
<blockquote>
<p>关于现实中真实的系统是怎么设计的文章。</p>
</blockquote>
<p align="center">
  <img src="http://timpcfan-site.cdn.bcebos.com/imgs/YonmRt.png">
  <i>Content not supported</i>
  <strong><a href="https://www.infoq.com/presentations/Twitter-Timeline-Scalability">Source: Twitter timelines at scale</a></strong>
</p>
<p><strong>不要专注于以下文章的细节，专注于以下方面：</strong></p>
<ul>
<li>发现这些文章中的共同的原则、技术和模式。</li>
<li>学习每个组件解决哪些问题，什么情况下使用，什么情况下不适用</li>
<li>复习学过的文章</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th>系统</th>
<th>引用</th>
</tr>
</thead>
<tbody>
<tr>
<td>Data processing</td>
<td><strong>MapReduce</strong> - Google 的分布式数据处理</td>
<td><a href="http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/mapreduce-osdi04.pdf" target="_blank" rel="noopener noreferrer">research.google.com</a></td>
</tr>
<tr>
<td>Data processing</td>
<td><strong>Spark</strong> - Databricks 的分布式数据处理</td>
<td><a href="http://www.slideshare.net/AGrishchenko/apache-spark-architecture" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td>Data processing</td>
<td><strong>Storm</strong> - Twitter 的分布式数据处理</td>
<td><a href="http://www.slideshare.net/previa/storm-16094009" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Data store</td>
<td><strong>Bigtable</strong> - Google 的列式数据库</td>
<td><a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf" target="_blank" rel="noopener noreferrer">harvard.edu</a></td>
</tr>
<tr>
<td>Data store</td>
<td><strong>HBase</strong> - Bigtable 的开源实现</td>
<td><a href="http://www.slideshare.net/alexbaranau/intro-to-hbase" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td>Data store</td>
<td><strong>Cassandra</strong> - Facebook 的列式数据库</td>
<td><a href="http://www.slideshare.net/planetcassandra/cassandra-introduction-features-30103666" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td>Data store</td>
<td><strong>DynamoDB</strong> - Amazon 的文档数据库</td>
<td><a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf" target="_blank" rel="noopener noreferrer">harvard.edu</a></td>
</tr>
<tr>
<td>Data store</td>
<td><strong>MongoDB</strong> - 文档数据库</td>
<td><a href="http://www.slideshare.net/mdirolf/introduction-to-mongodb" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td>Data store</td>
<td><strong>Spanner</strong> - Google 的全球分布数据库</td>
<td><a href="http://research.google.com/archive/spanner-osdi2012.pdf" target="_blank" rel="noopener noreferrer">research.google.com</a></td>
</tr>
<tr>
<td>Data store</td>
<td><strong>Memcached</strong> - 分布式内存缓存系统</td>
<td><a href="http://www.slideshare.net/oemebamo/introduction-to-memcached" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td>Data store</td>
<td><strong>Redis</strong> - 能够持久化及具有值类型的分布式内存缓存系统</td>
<td><a href="http://www.slideshare.net/dvirsky/introduction-to-redis" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>File system</td>
<td><strong>Google File System (GFS)</strong> - 分布式文件系统</td>
<td><a href="http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/gfs-sosp2003.pdf" target="_blank" rel="noopener noreferrer">research.google.com</a></td>
</tr>
<tr>
<td>File system</td>
<td><strong>Hadoop File System (HDFS)</strong> - GFS 的开源实现</td>
<td><a href="https://hadoop.apache.org/docs/r1.2.1/hdfs_design.html" target="_blank" rel="noopener noreferrer">apache.org</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Misc</td>
<td><strong>Chubby</strong> - Google 的分布式系统的低耦合锁服务</td>
<td><a href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/chubby-osdi06.pdf" target="_blank" rel="noopener noreferrer">research.google.com</a></td>
</tr>
<tr>
<td>Misc</td>
<td><strong>Dapper</strong> - 分布式系统跟踪基础设施</td>
<td><a href="http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/36356.pdf" target="_blank" rel="noopener noreferrer">research.google.com</a></td>
</tr>
<tr>
<td>Misc</td>
<td><strong>Kafka</strong> - LinkedIn 的发布订阅消息系统</td>
<td><a href="http://www.slideshare.net/mumrah/kafka-talk-tri-hug" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td>Misc</td>
<td><strong>Zookeeper</strong> - 集中的基础架构和协调服务</td>
<td><a href="http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper" target="_blank" rel="noopener noreferrer">slideshare.net</a></td>
</tr>
<tr>
<td></td>
<td>添加更多</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="公司的系统架构" tabindex="-1"> 公司的系统架构</h3>
<table>
<thead>
<tr>
<th>Company</th>
<th>Reference(s)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Amazon</td>
<td><a href="http://highscalability.com/amazon-architecture" target="_blank" rel="noopener noreferrer">Amazon 的架构</a></td>
</tr>
<tr>
<td>Cinchcast</td>
<td><a href="http://highscalability.com/blog/2012/7/16/cinchcast-architecture-producing-1500-hours-of-audio-every-d.html" target="_blank" rel="noopener noreferrer">每天产生 1500 小时的音频</a></td>
</tr>
<tr>
<td>DataSift</td>
<td><a href="http://highscalability.com/blog/2011/11/29/datasift-architecture-realtime-datamining-at-120000-tweets-p.html" target="_blank" rel="noopener noreferrer">每秒实时挖掘 120000 条 tweet</a></td>
</tr>
<tr>
<td>DropBox</td>
<td><a href="https://www.youtube.com/watch?v=PE4gwstWhmc" target="_blank" rel="noopener noreferrer">我们如何缩放 Dropbox</a></td>
</tr>
<tr>
<td>ESPN</td>
<td><a href="http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html" target="_blank" rel="noopener noreferrer">每秒操作 100000 次</a></td>
</tr>
<tr>
<td>Google</td>
<td><a href="http://highscalability.com/google-architecture" target="_blank" rel="noopener noreferrer">Google 的架构</a></td>
</tr>
<tr>
<td>Instagram</td>
<td><a href="http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html" target="_blank" rel="noopener noreferrer">1400 万用户，达到兆级别的照片存储</a><i>Content not supported</i><a href="http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances" target="_blank" rel="noopener noreferrer">是什么在驱动 Instagram</a></td>
</tr>
<tr>
<td>Justin.tv</td>
<td><a href="http://highscalability.com/blog/2010/3/16/justintvs-live-video-broadcasting-architecture.html" target="_blank" rel="noopener noreferrer">Justin.Tv 的直播广播架构</a></td>
</tr>
<tr>
<td>Facebook</td>
<td><a href="https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/key-value/fb-memcached-nsdi-2013.pdf" target="_blank" rel="noopener noreferrer">Facebook 的可扩展 memcached</a><i>Content not supported</i><a href="https://cs.uwaterloo.ca/~brecht/courses/854-Emerging-2014/readings/data-store/tao-facebook-distributed-datastore-atc-2013.pdf" target="_blank" rel="noopener noreferrer">TAO: Facebook 社交图的分布式数据存储</a><i>Content not supported</i><a href="https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf" target="_blank" rel="noopener noreferrer">Facebook 的图片存储</a></td>
</tr>
<tr>
<td>Flickr</td>
<td><a href="http://highscalability.com/flickr-architecture" target="_blank" rel="noopener noreferrer">Flickr 的架构</a></td>
</tr>
<tr>
<td>Mailbox</td>
<td><a href="http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html" target="_blank" rel="noopener noreferrer">在 6 周内从 0 到 100 万用户</a></td>
</tr>
<tr>
<td>Pinterest</td>
<td><a href="http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html" target="_blank" rel="noopener noreferrer">从零到每月数十亿的浏览量</a><i>Content not supported</i><a href="http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html" target="_blank" rel="noopener noreferrer">1800 万访问用户，10 倍增长，12 名员工</a></td>
</tr>
<tr>
<td>Playfish</td>
<td><a href="http://highscalability.com/blog/2010/9/21/playfishs-social-gaming-architecture-50-million-monthly-user.html" target="_blank" rel="noopener noreferrer">月用户量 5000 万并在不断增长</a></td>
</tr>
<tr>
<td>PlentyOfFish</td>
<td><a href="http://highscalability.com/plentyoffish-architecture" target="_blank" rel="noopener noreferrer">PlentyOfFish 的架构</a></td>
</tr>
<tr>
<td>Salesforce</td>
<td><a href="http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html" target="_blank" rel="noopener noreferrer">他们每天如何处理 13 亿笔交易</a></td>
</tr>
<tr>
<td>Stack Overflow</td>
<td><a href="http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html" target="_blank" rel="noopener noreferrer">Stack Overflow 的架构</a></td>
</tr>
<tr>
<td>TripAdvisor</td>
<td><a href="http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html" target="_blank" rel="noopener noreferrer">40M 访问者，200M 页面浏览量，30TB 数据</a></td>
</tr>
<tr>
<td>Tumblr</td>
<td><a href="http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html" target="_blank" rel="noopener noreferrer">每月 150 亿的浏览量</a></td>
</tr>
<tr>
<td>Twitter</td>
<td><a href="http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster" target="_blank" rel="noopener noreferrer">Making Twitter 10000 percent faster</a><i>Content not supported</i><a href="http://highscalability.com/blog/2011/12/19/how-twitter-stores-250-million-tweets-a-day-using-mysql.html" target="_blank" rel="noopener noreferrer">每天使用 MySQL 存储 2.5 亿条 tweet</a><i>Content not supported</i><a href="http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html" target="_blank" rel="noopener noreferrer">150M 活跃用户，300K QPS，22 MB/S 的防火墙</a><i>Content not supported</i><a href="https://www.infoq.com/presentations/Twitter-Timeline-Scalability" target="_blank" rel="noopener noreferrer">可扩展时间表</a><i>Content not supported</i><a href="https://www.youtube.com/watch?v=5cKTP36HVgI" target="_blank" rel="noopener noreferrer">Twitter 的大小数据</a><i>Content not supported</i><a href="https://www.youtube.com/watch?v=z8LU0Cj6BOU" target="_blank" rel="noopener noreferrer">Twitter 的行为：规模超过 1 亿用户</a></td>
</tr>
<tr>
<td>Uber</td>
<td><a href="http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html" target="_blank" rel="noopener noreferrer">Uber 如何扩展自己的实时化市场</a></td>
</tr>
<tr>
<td>WhatsApp</td>
<td><a href="http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html" target="_blank" rel="noopener noreferrer">Facebook 用 190 亿美元购买 WhatsApp 的架构</a></td>
</tr>
<tr>
<td>YouTube</td>
<td><a href="https://www.youtube.com/watch?v=w5WVu624fY8" target="_blank" rel="noopener noreferrer">YouTube 的可扩展性</a><i>Content not supported</i><a href="http://highscalability.com/youtube-architecture" target="_blank" rel="noopener noreferrer">YouTube 的架构</a></td>
</tr>
</tbody>
</table>
<h3 id="公司工程博客" tabindex="-1"> 公司工程博客</h3>
<blockquote>
<p>你即将面试的公司的架构</p>
<p>你面对的问题可能就来自于同样领域</p>
</blockquote>
<ul>
<li><a href="http://nerds.airbnb.com/" target="_blank" rel="noopener noreferrer">Airbnb Engineering</a></li>
<li><a href="https://developer.atlassian.com/blog/" target="_blank" rel="noopener noreferrer">Atlassian Developers</a></li>
<li><a href="http://cloudengineering.autodesk.com/blog/" target="_blank" rel="noopener noreferrer">Autodesk Engineering</a></li>
<li><a href="https://aws.amazon.com/blogs/aws/" target="_blank" rel="noopener noreferrer">AWS Blog</a></li>
<li><a href="http://word.bitly.com/" target="_blank" rel="noopener noreferrer">Bitly Engineering Blog</a></li>
<li><a href="https://www.box.com/blog/engineering/" target="_blank" rel="noopener noreferrer">Box Blogs</a></li>
<li><a href="http://blog.cloudera.com/blog/" target="_blank" rel="noopener noreferrer">Cloudera Developer Blog</a></li>
<li><a href="https://tech.dropbox.com/" target="_blank" rel="noopener noreferrer">Dropbox Tech Blog</a></li>
<li><a href="http://engineering.quora.com/" target="_blank" rel="noopener noreferrer">Engineering at Quora</a></li>
<li><a href="http://www.ebaytechblog.com/" target="_blank" rel="noopener noreferrer">Ebay Tech Blog</a></li>
<li><a href="https://blog.evernote.com/tech/" target="_blank" rel="noopener noreferrer">Evernote Tech Blog</a></li>
<li><a href="http://codeascraft.com/" target="_blank" rel="noopener noreferrer">Etsy Code as Craft</a></li>
<li><a href="https://www.facebook.com/Engineering" target="_blank" rel="noopener noreferrer">Facebook Engineering</a></li>
<li><a href="http://code.flickr.net/" target="_blank" rel="noopener noreferrer">Flickr Code</a></li>
<li><a href="http://engineering.foursquare.com/" target="_blank" rel="noopener noreferrer">Foursquare Engineering Blog</a></li>
<li><a href="https://github.blog/category/engineering" target="_blank" rel="noopener noreferrer">GitHub Engineering Blog</a></li>
<li><a href="http://googleresearch.blogspot.com/" target="_blank" rel="noopener noreferrer">Google Research Blog</a></li>
<li><a href="https://engineering.groupon.com/" target="_blank" rel="noopener noreferrer">Groupon Engineering Blog</a></li>
<li><a href="https://engineering.heroku.com/" target="_blank" rel="noopener noreferrer">Heroku Engineering Blog</a></li>
<li><a href="http://product.hubspot.com/blog/topic/engineering" target="_blank" rel="noopener noreferrer">Hubspot Engineering Blog</a></li>
<li><a href="http://highscalability.com/" target="_blank" rel="noopener noreferrer">High Scalability</a></li>
<li><a href="http://instagram-engineering.tumblr.com/" target="_blank" rel="noopener noreferrer">Instagram Engineering</a></li>
<li><a href="https://software.intel.com/en-us/blogs/" target="_blank" rel="noopener noreferrer">Intel Software Blog</a></li>
<li><a href="https://blogs.janestreet.com/category/ocaml/" target="_blank" rel="noopener noreferrer">Jane Street Tech Blog</a></li>
<li><a href="http://engineering.linkedin.com/blog" target="_blank" rel="noopener noreferrer">LinkedIn Engineering</a></li>
<li><a href="https://engineering.microsoft.com/" target="_blank" rel="noopener noreferrer">Microsoft Engineering</a></li>
<li><a href="https://blogs.msdn.microsoft.com/pythonengineering/" target="_blank" rel="noopener noreferrer">Microsoft Python Engineering</a></li>
<li><a href="http://techblog.netflix.com/" target="_blank" rel="noopener noreferrer">Netflix Tech Blog</a></li>
<li><a href="https://devblog.paypal.com/category/engineering/" target="_blank" rel="noopener noreferrer">Paypal Developer Blog</a></li>
<li><a href="http://engineering.pinterest.com/" target="_blank" rel="noopener noreferrer">Pinterest Engineering Blog</a></li>
<li><a href="https://engineering.quora.com/" target="_blank" rel="noopener noreferrer">Quora Engineering</a></li>
<li><a href="http://www.redditblog.com/" target="_blank" rel="noopener noreferrer">Reddit Blog</a></li>
<li><a href="https://developer.salesforce.com/blogs/engineering/" target="_blank" rel="noopener noreferrer">Salesforce Engineering Blog</a></li>
<li><a href="https://slack.engineering/" target="_blank" rel="noopener noreferrer">Slack Engineering Blog</a></li>
<li><a href="https://labs.spotify.com/" target="_blank" rel="noopener noreferrer">Spotify Labs</a></li>
<li><a href="http://www.twilio.com/engineering" target="_blank" rel="noopener noreferrer">Twilio Engineering Blog</a></li>
<li><a href="https://engineering.twitter.com/" target="_blank" rel="noopener noreferrer">Twitter Engineering</a></li>
<li><a href="http://eng.uber.com/" target="_blank" rel="noopener noreferrer">Uber Engineering Blog</a></li>
<li><a href="http://yahooeng.tumblr.com/" target="_blank" rel="noopener noreferrer">Yahoo Engineering Blog</a></li>
<li><a href="http://engineeringblog.yelp.com/" target="_blank" rel="noopener noreferrer">Yelp Engineering Blog</a></li>
<li><a href="https://www.zynga.com/blogs/engineering" target="_blank" rel="noopener noreferrer">Zynga Engineering Blog</a></li>
</ul>
<h4 id="来源及延伸阅读-15" tabindex="-1"> 来源及延伸阅读</h4>
<ul>
<li><a href="https://github.com/kilimchoi/engineering-blogs" target="_blank" rel="noopener noreferrer">kilimchoi/engineering-blogs</a></li>
</ul>
<h2 id="正在完善中" tabindex="-1"> 正在完善中</h2>
<p>有兴趣加入添加一些部分或者帮助完善某些部分吗？！</p>
<ul>
<li>使用 MapReduce 进行分布式计算</li>
<li>一致性哈希</li>
<li>直接存储器访问（DMA）控制器</li>
<li></li>
</ul>
<h2 id="致谢" tabindex="-1"> 致谢</h2>
<p>整个仓库都提供了证书和源</p>
<p>特别鸣谢：</p>
<ul>
<li><a href="http://www.hiredintech.com/system-design/the-system-design-process/" target="_blank" rel="noopener noreferrer">Hired in tech</a></li>
<li><a href="https://www.amazon.com/dp/0984782850/" target="_blank" rel="noopener noreferrer">Cracking the coding interview</a></li>
<li><a href="http://highscalability.com/" target="_blank" rel="noopener noreferrer">High scalability</a></li>
<li><a href="https://github.com/checkcheckzz/system-design-interview" target="_blank" rel="noopener noreferrer">checkcheckzz/system-design-interview</a></li>
<li><a href="https://github.com/shashank88/system_design" target="_blank" rel="noopener noreferrer">shashank88/system_design</a></li>
<li><a href="https://github.com/mmcgrana/services-engineering" target="_blank" rel="noopener noreferrer">mmcgrana/services-engineering</a></li>
<li><a href="https://gist.github.com/vasanthk/485d1c25737e8e72759f" target="_blank" rel="noopener noreferrer">System design cheat sheet</a></li>
<li><a href="http://dancres.github.io/Pages/" target="_blank" rel="noopener noreferrer">A distributed systems reading list</a></li>
<li><a href="http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview" target="_blank" rel="noopener noreferrer">Cracking the system design interview</a></li>
</ul>
<h2 id="联系方式" tabindex="-1"> 联系方式</h2>
<p>欢迎联系我讨论本文的不足、问题或者意见。</p>
<p>可以在我的 <a href="https://github.com/donnemartin" target="_blank" rel="noopener noreferrer">GitHub 主页</a>上找到我的联系方式</p>
<h2 id="许可" tabindex="-1"> 许可</h2>
<pre><code>Creative Commons Attribution 4.0 International License (CC BY 4.0)

http://creativecommons.org/licenses/by/4.0/
</code></pre>
]]></content:encoded>
      <enclosure url="http://timpcfan-site.cdn.bcebos.com/imgs/bQjZIt.png" type="image/png"/>
    </item>
    <item>
      <title>设计一个网页爬虫</title>
      <link>https://timpcfan.site/code/system-design/system-design-primer/web_crawler.html</link>
      <guid>https://timpcfan.site/code/system-design/system-design-primer/web_crawler.html</guid>
      <source url="https://timpcfan.site/rss.xml">设计一个网页爬虫</source>
      <category>转载</category>
      <pubDate>Sun, 02 Oct 2022 15:02:27 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<ul>
<li>原文地址：<a href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="noopener noreferrer">github.com/donnemartin/system-design-primer</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener noreferrer">掘金翻译计划</a></li>
<li>译者：<a href="https://github.com/XatMassacrE" target="_blank" rel="noopener noreferrer">XatMassacrE</a>、<a href="https://github.com/L9m" target="_blank" rel="noopener noreferrer">L9m</a>、<a href="https://github.com/Airmacho" target="_blank" rel="noopener noreferrer">Airmacho</a>、<a href="https://github.com/xiaoyusilen" target="_blank" rel="noopener noreferrer">xiaoyusilen</a>、<a href="https://github.com/jifaxu" target="_blank" rel="noopener noreferrer">jifaxu</a>、<a href="https://github.com/sqrthree" target="_blank" rel="noopener noreferrer">根号三</a></li>
</ul>
</blockquote>
<h1 id="设计一个网页爬虫" tabindex="-1"> 设计一个网页爬虫</h1>
<p><strong>注意：这个文档中的链接会直接指向<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95" target="_blank" rel="noopener noreferrer">系统设计主题索引</a>中的有关部分，以避免重复的内容。你可以参考链接的相关内容，来了解其总的要点、方案的权衡取舍以及可选的替代方案。</strong></p>
<h2 id="第一步-简述用例与约束条件" tabindex="-1"> 第一步：简述用例与约束条件</h2>
<blockquote>
<p>把所有需要的东西聚集在一起，审视问题。不停的提问，以至于我们可以明确使用场景和约束。讨论假设。</p>
</blockquote>
<p>我们将在没有面试官明确说明问题的情况下，自己定义一些用例以及限制条件。</p>
<h3 id="用例" tabindex="-1"> 用例</h3>
<h4 id="我们把问题限定在仅处理以下用例的范围中" tabindex="-1"> 我们把问题限定在仅处理以下用例的范围中</h4>
<ul>
<li><strong>服务</strong> 抓取一系列链接：
<ul>
<li>生成包含搜索词的网页倒排索引</li>
<li>生成页面的标题和摘要信息
<ul>
<li>页面标题和摘要都是静态的，它们不会根据搜索词改变</li>
</ul>
</li>
</ul>
</li>
<li><strong>用户</strong> 输入搜索词后，可以看到相关的搜索结果列表，列表每一项都包含由网页爬虫生成的页面标题及摘要
<ul>
<li>只给该用例绘制出概要组件和交互说明，无需讨论细节</li>
</ul>
</li>
<li><strong>服务</strong> 具有高可用性</li>
</ul>
<h4 id="无需考虑" tabindex="-1"> 无需考虑</h4>
<ul>
<li>搜索分析</li>
<li>个性化搜索结果</li>
<li>页面排名</li>
</ul>
<h3 id="限制条件与假设" tabindex="-1"> 限制条件与假设</h3>
<h4 id="提出假设" tabindex="-1"> 提出假设</h4>
<ul>
<li>搜索流量分布不均
<ul>
<li>有些搜索词非常热门，有些则非常冷门</li>
</ul>
</li>
<li>只支持匿名用户</li>
<li>用户很快就能看到搜索结果</li>
<li>网页爬虫不应该陷入死循环
<ul>
<li>当爬虫路径包含环的时候，将会陷入死循环</li>
</ul>
</li>
<li>抓取 10 亿个链接
<ul>
<li>要定期重新抓取页面以确保新鲜度</li>
<li>平均每周重新抓取一次，网站越热门，那么重新抓取的频率越高
<ul>
<li>每月抓取 40 亿个链接</li>
</ul>
</li>
<li>每个页面的平均存储大小：500 KB
<ul>
<li>简单起见，重新抓取的页面算作新页面</li>
</ul>
</li>
</ul>
</li>
<li>每月搜索量 1000 亿次</li>
</ul>
<p>用更传统的系统来练习 —— 不要使用 <a href="http://lucene.apache.org/solr/" target="_blank" rel="noopener noreferrer">solr</a> 、<a href="http://nutch.apache.org/" target="_blank" rel="noopener noreferrer">nutch</a> 之类的现成系统。</p>
<h4 id="计算用量" tabindex="-1"> 计算用量</h4>
<p><strong>如果你需要进行粗略的用量计算，请向你的面试官说明。</strong></p>
<ul>
<li>每月存储 2 PB 页面
<ul>
<li>每月抓取 40 亿个页面，每个页面 500 KB</li>
<li>三年存储 72 PB 页面</li>
</ul>
</li>
<li>每秒 1600 次写请求</li>
<li>每秒 40000 次搜索请求</li>
</ul>
<p>简便换算指南：</p>
<ul>
<li>一个月有 250 万秒</li>
<li>每秒 1 个请求，即每月 250 万个请求</li>
<li>每秒 40 个请求，即每月 1 亿个请求</li>
<li>每秒 400 个请求，即每月 10 亿个请求</li>
</ul>
<h2 id="第二步-概要设计" tabindex="-1"> 第二步： 概要设计</h2>
<blockquote>
<p>列出所有重要组件以规划概要设计。</p>
</blockquote>
<p><img src="http://i.imgur.com/xjdAAUv.png" alt="Imgur" loading="lazy"></p>
<h2 id="第三步-设计核心组件" tabindex="-1"> 第三步：设计核心组件</h2>
<blockquote>
<p>对每一个核心组件进行详细深入的分析。</p>
</blockquote>
<h3 id="用例-爬虫服务抓取一系列网页" tabindex="-1"> 用例：爬虫服务抓取一系列网页</h3>
<p>假设我们有一个初始列表 <code>links_to_crawl</code>（待抓取链接），它最初基于网站整体的知名度来排序。当然如果这个假设不合理，我们可以使用 <a href="https://www.yahoo.com/" target="_blank" rel="noopener noreferrer">Yahoo</a>、<a href="http://www.dmoz.org/" target="_blank" rel="noopener noreferrer">DMOZ</a> 等知名门户网站作为种子链接来进行扩散 。</p>
<p>我们将用表 <code>crawled_links</code> （已抓取链接 ）来记录已经处理过的链接以及相应的页面签名。</p>
<p>我们可以将 <code>links_to_crawl</code> 和 <code>crawled_links</code> 记录在键-值型 <strong>NoSQL 数据库</strong>中。对于 <code>crawled_links</code> 中已排序的链接，我们可以使用 <a href="https://redis.io/" target="_blank" rel="noopener noreferrer">Redis</a> 的有序集合来维护网页链接的排名。我们应当在 <a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%BF%98%E6%98%AF-nosql" target="_blank" rel="noopener noreferrer">选择 SQL 还是 NoSQL 的问题上，讨论有关使用场景以及利弊 </a>。</p>
<ul>
<li><strong>爬虫服务</strong>按照以下流程循环处理每一个页面链接：
<ul>
<li>选取排名最靠前的待抓取链接
<ul>
<li>在 <strong>NoSQL 数据库</strong>的 <code>crawled_links</code> 中，检查待抓取页面的签名是否与某个已抓取页面的签名相似
<ul>
<li>若存在，则降低该页面链接的优先级
<ul>
<li>这样做可以避免陷入死循环</li>
<li>继续（进入下一次循环）</li>
</ul>
</li>
<li>若不存在，则抓取该链接
<ul>
<li>在<strong>倒排索引服务</strong>任务队列中，新增一个生成<a href="https://en.wikipedia.org/wiki/Search_engine_indexing" target="_blank" rel="noopener noreferrer">倒排索引</a>任务。</li>
<li>在<strong>文档服务</strong>任务队列中，新增一个生成静态标题和摘要的任务。</li>
<li>生成页面签名</li>
<li>在 <strong>NoSQL 数据库</strong>的 <code>links_to_crawl</code> 中删除该链接</li>
<li>在 <strong>NoSQL 数据库</strong>的 <code>crawled_links</code> 中插入该链接以及页面签名</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>向面试官了解你需要写多少代码</strong>。</p>
<p><code>PagesDataStore</code> 是<strong>爬虫服务</strong>中的一个抽象类，它使用 <strong>NoSQL 数据库</strong>进行存储。</p>
<div><pre><code><span>class</span> <span>PagesDataStore</span><span>(</span><span>object</span><span>)</span><span>:</span>

    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> db<span>)</span><span>;</span>
        self<span>.</span>db <span>=</span> db
        <span>.</span><span>.</span><span>.</span>

    <span>def</span> <span>add_link_to_crawl</span><span>(</span>self<span>,</span> url<span>)</span><span>:</span>
        <span>"""将指定链接加入 `links_to_crawl`。"""</span>
        <span>.</span><span>.</span><span>.</span>

    <span>def</span> <span>remove_link_to_crawl</span><span>(</span>self<span>,</span> url<span>)</span><span>:</span>
        <span>"""从 `links_to_crawl` 中删除指定链接。"""</span>
        <span>.</span><span>.</span><span>.</span>

    <span>def</span> <span>reduce_priority_link_to_crawl</span><span>(</span>self<span>,</span> url<span>)</span>
        <span>"""在 `links_to_crawl` 中降低一个链接的优先级以避免死循环。"""</span>
        <span>.</span><span>.</span><span>.</span>

    <span>def</span> <span>extract_max_priority_page</span><span>(</span>self<span>)</span><span>:</span>
        <span>"""返回 `links_to_crawl` 中优先级最高的链接。"""</span>
        <span>.</span><span>.</span><span>.</span>

    <span>def</span> <span>insert_crawled_link</span><span>(</span>self<span>,</span> url<span>,</span> signature<span>)</span><span>:</span>
        <span>"""将指定链接加入 `crawled_links`。"""</span>
        <span>.</span><span>.</span><span>.</span>

    <span>def</span> <span>crawled_similar</span><span>(</span>self<span>,</span> signature<span>)</span><span>:</span>
        <span>"""判断待抓取页面的签名是否与某个已抓取页面的签名相似。"""</span>
        <span>.</span><span>.</span><span>.</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>Page</code> 是<strong>爬虫服务</strong>的一个抽象类，它封装了网页对象，由页面链接、页面内容、子链接和页面签名构成。</p>
<div><pre><code><span>class</span> <span>Page</span><span>(</span><span>object</span><span>)</span><span>:</span>

    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> url<span>,</span> contents<span>,</span> child_urls<span>,</span> signature<span>)</span><span>:</span>
        self<span>.</span>url <span>=</span> url
        self<span>.</span>contents <span>=</span> contents
        self<span>.</span>child_urls <span>=</span> child_urls
        self<span>.</span>signature <span>=</span> signature
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>Crawler</code> 是<strong>爬虫服务</strong>的主类，由<code>Page</code> 和 <code>PagesDataStore</code> 组成。</p>
<div><pre><code><span>class</span> <span>Crawler</span><span>(</span><span>object</span><span>)</span><span>:</span>

    <span>def</span> <span>__init__</span><span>(</span>self<span>,</span> data_store<span>,</span> reverse_index_queue<span>,</span> doc_index_queue<span>)</span><span>:</span>
        self<span>.</span>data_store <span>=</span> data_store
        self<span>.</span>reverse_index_queue <span>=</span> reverse_index_queue
        self<span>.</span>doc_index_queue <span>=</span> doc_index_queue

    <span>def</span> <span>create_signature</span><span>(</span>self<span>,</span> page<span>)</span><span>:</span>
        <span>"""基于页面链接与内容生成签名。"""</span>
        <span>.</span><span>.</span><span>.</span>

    <span>def</span> <span>crawl_page</span><span>(</span>self<span>,</span> page<span>)</span><span>:</span>
        <span>for</span> url <span>in</span> page<span>.</span>child_urls<span>:</span>
            self<span>.</span>data_store<span>.</span>add_link_to_crawl<span>(</span>url<span>)</span>
        page<span>.</span>signature <span>=</span> self<span>.</span>create_signature<span>(</span>page<span>)</span>
        self<span>.</span>data_store<span>.</span>remove_link_to_crawl<span>(</span>page<span>.</span>url<span>)</span>
        self<span>.</span>data_store<span>.</span>insert_crawled_link<span>(</span>page<span>.</span>url<span>,</span> page<span>.</span>signature<span>)</span>

    <span>def</span> <span>crawl</span><span>(</span>self<span>)</span><span>:</span>
        <span>while</span> <span>True</span><span>:</span>
            page <span>=</span> self<span>.</span>data_store<span>.</span>extract_max_priority_page<span>(</span><span>)</span>
            <span>if</span> page <span>is</span> <span>None</span><span>:</span>
                <span>break</span>
            <span>if</span> self<span>.</span>data_store<span>.</span>crawled_similar<span>(</span>page<span>.</span>signature<span>)</span><span>:</span>
                self<span>.</span>data_store<span>.</span>reduce_priority_link_to_crawl<span>(</span>page<span>.</span>url<span>)</span>
            <span>else</span><span>:</span>
                self<span>.</span>crawl_page<span>(</span>page<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="处理重复内容" tabindex="-1"> 处理重复内容</h3>
<p>我们要谨防网页爬虫陷入死循环，这通常会发生在爬虫路径中存在环的情况。</p>
<p><strong>向面试官了解你需要写多少代码</strong>.</p>
<p>删除重复链接：</p>
<ul>
<li>假设数据量较小，我们可以用类似于 <code>sort | unique</code> 的方法。（译注： 先排序，后去重）</li>
<li>假设有 10 亿条数据，我们应该使用 <strong>MapReduce</strong> 来输出只出现 1 次的记录。</li>
</ul>
<div><pre><code><span>class</span> <span>RemoveDuplicateUrls</span><span>(</span>MRJob<span>)</span><span>:</span>

    <span>def</span> <span>mapper</span><span>(</span>self<span>,</span> _<span>,</span> line<span>)</span><span>:</span>
        <span>yield</span> line<span>,</span> <span>1</span>

    <span>def</span> <span>reducer</span><span>(</span>self<span>,</span> key<span>,</span> values<span>)</span><span>:</span>
        total <span>=</span> <span>sum</span><span>(</span>values<span>)</span>
        <span>if</span> total <span>==</span> <span>1</span><span>:</span>
            <span>yield</span> key<span>,</span> total
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>比起处理重复内容，检测重复内容更为复杂。我们可以基于网页内容生成签名，然后对比两者签名的相似度。可能会用到的算法有 <a href="https://en.wikipedia.org/wiki/Jaccard_index" target="_blank" rel="noopener noreferrer">Jaccard index</a> 以及 <a href="https://en.wikipedia.org/wiki/Cosine_similarity" target="_blank" rel="noopener noreferrer">cosine similarity</a>。</p>
<h3 id="抓取结果更新策略" tabindex="-1"> 抓取结果更新策略</h3>
<p>要定期重新抓取页面以确保新鲜度。抓取结果应该有个 <code>timestamp</code> 字段记录上一次页面抓取时间。每隔一段时间，比如说 1 周，所有页面都需要更新一次。对于热门网站或是内容频繁更新的网站，爬虫抓取间隔可以缩短。</p>
<p>尽管我们不会深入网页数据分析的细节，我们仍然要做一些数据挖掘工作来确定一个页面的平均更新时间，并且根据相关的统计数据来决定爬虫的重新抓取频率。</p>
<p>当然我们也应该根据站长提供的 <code>Robots.txt</code> 来控制爬虫的抓取频率。</p>
<h3 id="用例-用户输入搜索词后-可以看到相关的搜索结果列表-列表每一项都包含由网页爬虫生成的页面标题及摘要" tabindex="-1"> 用例：用户输入搜索词后，可以看到相关的搜索结果列表，列表每一项都包含由网页爬虫生成的页面标题及摘要</h3>
<ul>
<li><strong>客户端</strong>向运行<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener noreferrer">反向代理</a>的 <strong>Web 服务器</strong>发送一个请求</li>
<li><strong>Web 服务器</strong> 发送请求到 <strong>Query API</strong> 服务器</li>
<li><strong>查询 API</strong> 服务将会做这些事情：
<ul>
<li>解析查询参数
<ul>
<li>删除 HTML 标记</li>
<li>将文本分割成词组 （译注： 分词处理）</li>
<li>修正错别字</li>
<li>规范化大小写</li>
<li>将搜索词转换为布尔运算</li>
</ul>
</li>
<li>使用<strong>倒排索引服务</strong>来查找匹配查询的文档
<ul>
<li><strong>倒排索引服务</strong>对匹配到的结果进行排名，然后返回最符合的结果</li>
</ul>
</li>
<li>使用<strong>文档服务</strong>返回文章标题与摘要</li>
</ul>
</li>
</ul>
<p>我们使用 <a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest" target="_blank" rel="noopener noreferrer"><strong>REST API</strong></a> 与客户端通信：</p>
<div><pre><code>$ curl https://search.com/api/v1/search?query=hello+world
</code></pre><div aria-hidden="true"><div></div></div></div><p>响应内容:</p>
<div><pre><code>{
    "title": "foo's title",
    "snippet": "foo's snippet",
    "link": "https://foo.com",
},
{
    "title": "bar's title",
    "snippet": "bar's snippet",
    "link": "https://bar.com",
},
{
    "title": "baz's title",
    "snippet": "baz's snippet",
    "link": "https://baz.com",
},
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>对于服务器内部通信，我们可以使用 <a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8D%8F%E8%AE%AErpc" target="_blank" rel="noopener noreferrer">远程过程调用协议（RPC）</a></p>
<h2 id="第四步-架构扩展" tabindex="-1"> 第四步：架构扩展</h2>
<blockquote>
<p>根据限制条件，找到并解决瓶颈。</p>
</blockquote>
<p><img src="http://i.imgur.com/bWxPtQA.png" alt="Imgur" loading="lazy"></p>
<p><strong>重要提示：不要直接从最初设计跳到最终设计！</strong></p>
<p>现在你要 1) <strong>基准测试、负载测试</strong>。2) <strong>分析、描述</strong>性能瓶颈。3) 在解决瓶颈问题的同时，评估替代方案、权衡利弊。4) 重复以上步骤。请阅读<a href="/code/system-design/system-design-primer/scaling_aws.html">设计一个系统，并将其扩大到为数以百万计的 AWS 用户服务</a> 来了解如何逐步扩大初始设计。</p>
<p>讨论初始设计可能遇到的瓶颈及相关解决方案是很重要的。例如加上一套配备多台 <strong>Web 服务器</strong>的<strong>负载均衡器</strong>是否能够解决问题？<strong>CDN</strong>呢？<strong>主从复制</strong>呢？它们各自的替代方案和需要<strong>权衡</strong>的利弊又有哪些呢？</p>
<p>我们将会介绍一些组件来完成设计，并解决架构规模扩张问题。内置的负载均衡器将不做讨论以节省篇幅。</p>
<p><strong>为了避免重复讨论</strong>，请参考<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95" target="_blank" rel="noopener noreferrer">系统设计主题索引</a>相关部分来了解其要点、方案的权衡取舍以及替代方案。</p>
<ul>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener noreferrer">DNS</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8" target="_blank" rel="noopener noreferrer">负载均衡器</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%B1%95" target="_blank" rel="noopener noreferrer">水平扩展</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener noreferrer">Web 服务器（反向代理）</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BA%94%E7%94%A8%E5%B1%82" target="_blank" rel="noopener noreferrer">API 服务器（应用层）</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">缓存</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#nosql" target="_blank" rel="noopener noreferrer">NoSQL</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">一致性模式</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%AF%E7%94%A8%E6%80%A7%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">可用性模式</a></li>
</ul>
<p>有些搜索词非常热门，有些则非常冷门。热门的搜索词可以通过诸如 Redis 或者 Memcached 之类的<strong>内存缓存</strong>来缩短响应时间，避免<strong>倒排索引服务</strong>以及<strong>文档服务</strong>过载。<strong>内存缓存</strong>同样适用于流量分布不均匀以及流量短时高峰问题。从内存中读取 1 MB 连续数据大约需要 250 微秒，而从 SSD 读取同样大小的数据要花费 4 倍的时间，从机械硬盘读取需要花费 80 倍以上的时间。<sup><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#每个程序员都应该知道的延迟数">1</a></sup></p>
<p>以下是优化<strong>爬虫服务</strong>的其他建议：</p>
<ul>
<li>为了处理数据大小问题以及网络请求负载，<strong>倒排索引服务</strong>和<strong>文档服务</strong>可能需要大量应用数据分片和数据复制。</li>
<li>DNS 查询可能会成为瓶颈，<strong>爬虫服务</strong>最好专门维护一套定期更新的 DNS 查询服务。</li>
<li>借助于<a href="https://en.wikipedia.org/wiki/Connection_pool" target="_blank" rel="noopener noreferrer">连接池</a>，即同时维持多个开放网络连接，可以提升<strong>爬虫服务</strong>的性能并减少内存使用量。
<ul>
<li>改用 <a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%8D%8F%E8%AE%AEudp" target="_blank" rel="noopener noreferrer">UDP</a> 协议同样可以提升性能</li>
</ul>
</li>
<li>网络爬虫受带宽影响较大，请确保带宽足够维持高吞吐量。</li>
</ul>
<h2 id="其它要点" tabindex="-1"> 其它要点</h2>
<blockquote>
<p>是否深入这些额外的主题，取决于你的问题范围和剩下的时间。</p>
</blockquote>
<h3 id="sql-扩展模式" tabindex="-1"> SQL 扩展模式</h3>
<ul>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6" target="_blank" rel="noopener noreferrer">读取复制</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%81%94%E5%90%88" target="_blank" rel="noopener noreferrer">联合</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%86%E7%89%87" target="_blank" rel="noopener noreferrer">分片</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E9%9D%9E%E8%A7%84%E8%8C%83%E5%8C%96" target="_blank" rel="noopener noreferrer">非规范化</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%B0%83%E4%BC%98" target="_blank" rel="noopener noreferrer">SQL 调优</a></li>
</ul>
<h4 id="nosql" tabindex="-1"> NoSQL</h4>
<ul>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E9%94%AE-%E5%80%BC%E5%AD%98%E5%82%A8" target="_blank" rel="noopener noreferrer">键-值存储</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8" target="_blank" rel="noopener noreferrer">文档类型存储</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%97%E5%9E%8B%E5%AD%98%E5%82%A8" target="_blank" rel="noopener noreferrer">列型存储</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener noreferrer">图数据库</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%BF%98%E6%98%AF-nosql" target="_blank" rel="noopener noreferrer">SQL vs NoSQL</a></li>
</ul>
<h3 id="缓存" tabindex="-1"> 缓存</h3>
<ul>
<li>在哪缓存
<ul>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">客户端缓存</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#cdn-%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">CDN 缓存</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#web-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">Web 服务器缓存</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">数据库缓存</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">应用缓存</a></li>
</ul>
</li>
<li>什么需要缓存
<ul>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">数据库查询级别的缓存</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AF%B9%E8%B1%A1%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">对象级别的缓存</a></li>
</ul>
</li>
<li>何时更新缓存
<ul>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%BC%93%E5%AD%98%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">缓存模式</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%9B%B4%E5%86%99%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">直写模式</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9B%9E%E5%86%99%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">回写模式</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%B7%E6%96%B0" target="_blank" rel="noopener noreferrer">刷新</a></li>
</ul>
</li>
</ul>
<h3 id="异步与微服务" tabindex="-1"> 异步与微服务</h3>
<ul>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97" target="_blank" rel="noopener noreferrer">消息队列</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97" target="_blank" rel="noopener noreferrer">任务队列</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%83%8C%E5%8E%8B" target="_blank" rel="noopener noreferrer">背压</a></li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BE%AE%E6%9C%8D%E5%8A%A1" target="_blank" rel="noopener noreferrer">微服务</a></li>
</ul>
<h3 id="通信" tabindex="-1"> 通信</h3>
<ul>
<li>可权衡选择的方案：
<ul>
<li>与客户端的外部通信 - <a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest" target="_blank" rel="noopener noreferrer">使用 REST 作为 HTTP API</a></li>
<li>内部通信 - <a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8D%8F%E8%AE%AErpc" target="_blank" rel="noopener noreferrer">RPC</a></li>
</ul>
</li>
<li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0" target="_blank" rel="noopener noreferrer">服务发现</a></li>
</ul>
<h3 id="安全性" tabindex="-1"> 安全性</h3>
<p>请参阅<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AE%89%E5%85%A8" target="_blank" rel="noopener noreferrer">安全</a>。</p>
<h3 id="延迟数值" tabindex="-1"> 延迟数值</h3>
<p>请参阅<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%95%B0" target="_blank" rel="noopener noreferrer">每个程序员都应该知道的延迟数</a>。</p>
<h3 id="持续探讨" tabindex="-1"> 持续探讨</h3>
<ul>
<li>持续进行基准测试并监控你的系统，以解决他们提出的瓶颈问题。</li>
<li>架构扩展是一个迭代的过程。</li>
</ul>
]]></content:encoded>
      <enclosure url="http://i.imgur.com/xjdAAUv.png" type="image/png"/>
    </item>
    <item>
      <title>游戏笔记</title>
      <link>https://timpcfan.site/life/game/</link>
      <guid>https://timpcfan.site/life/game/</guid>
      <source url="https://timpcfan.site/rss.xml">游戏笔记</source>
      <category>笔记</category>
      <pubDate>Sun, 02 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="目录" tabindex="-1"> 目录</h2>
<h3 id="玩游戏" tabindex="-1"> 玩游戏</h3>
<ul>
<li><a href="/life/game/mahjong.html">日麻笔记</a></li>
<li><a href="/life/game/genshin.html">原神</a></li>
<li><a href="/life/game/tetris.html">Tetris</a></li>
<li>Minecraft</li>
<li>东方project</li>
</ul>
<h3 id="做游戏" tabindex="-1"> 做游戏</h3>
<ul>
<li><a href="/life/game/design.html">游戏设计</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>原神</title>
      <link>https://timpcfan.site/life/game/genshin.html</link>
      <guid>https://timpcfan.site/life/game/genshin.html</guid>
      <source url="https://timpcfan.site/rss.xml">原神</source>
      <category>笔记</category>
      <pubDate>Sun, 02 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="常用工具" tabindex="-1"> 常用工具</h2>
<h3 id="伤害计算" tabindex="-1"> 伤害计算</h3>
<ul>
<li><a href="https://yuanshen.xin/" target="_blank" rel="noopener noreferrer">ysin</a> （中文的，可以直接读取圣遗物）</li>
<li><a href="https://genshinimpactcalculator.com/genshinCalc.html" target="_blank" rel="noopener noreferrer">Genshin Impact Calculator</a> （参数调节比较细致）</li>
</ul>
<h3 id="地图工具" tabindex="-1"> 地图工具</h3>
<ul>
<li><a href="https://webstatic.mihoyo.com/ys/app/interactive-map/index.html" target="_blank" rel="noopener noreferrer">米游社提瓦特大地图</a></li>
<li><a href="https://wiki.biligame.com/ys/%E5%8E%9F%E7%A5%9E%E5%9C%B0%E5%9B%BE%E5%B7%A5%E5%85%B7_%E5%85%A8%E5%9C%B0%E6%A0%87%E4%BD%8D%E7%BD%AE%E7%82%B9" target="_blank" rel="noopener noreferrer">B站原神wiki地图</a></li>
<li><a href="https://static-web.ghzs.com/cspage_pro/yuanshenMap.html#/" target="_blank" rel="noopener noreferrer">光环助手原神资源地图</a></li>
<li><a href="https://v3.yuanshen.site/" target="_blank" rel="noopener noreferrer">原神地图v3</a></li>
</ul>
<h3 id="其它工具" tabindex="-1"> 其它工具</h3>
<ul>
<li><a href="https://github.com/wyt1215819315/autoplan" target="_blank" rel="noopener noreferrer">autoplan</a> （米游社自动签到）</li>
</ul>
<h2 id="速查表" tabindex="-1"> 速查表</h2>
<h3 id="升级所需资源汇总" tabindex="-1"> 升级所需资源汇总</h3>
<ul>
<li>一周树脂恢复量：1260树脂（180树脂/天）</li>
<li>升满一个天赋：820树脂</li>
<li>0-90角色突破材料：920树脂</li>
<li>0-90角色经验书：419紫书</li>
<li>0-90武器突破材料：440树脂</li>
<li>0-90武器经验矿：907大矿（5星），605大矿（4星）</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>🀄️ 日麻笔记</title>
      <link>https://timpcfan.site/life/game/mahjong.html</link>
      <guid>https://timpcfan.site/life/game/mahjong.html</guid>
      <source url="https://timpcfan.site/rss.xml">🀄️ 日麻笔记</source>
      <category>笔记</category>
      <pubDate>Sun, 02 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<div><p>注意</p>
<p>本笔记非常零碎，没有进行系统整理，不适合零基础日麻新手，只是我在学习日麻的过程中将不熟悉的内容进行简单的汇总，若想系统学习日麻，推荐看以下几个。</p>
</div>
<h2 id="日麻教程" tabindex="-1"> 日麻教程</h2>
<ul>
<li><a href="https://space.bilibili.com/303003611/channel/series" target="_blank" rel="noopener noreferrer">星野Poteto的日麻教程视频合集</a></li>
<li><a href="https://www.bilibili.com/read/readlist/rl45758" target="_blank" rel="noopener noreferrer">Seventh9日麻教程</a></li>
<li><a href="https://bbs.nga.cn/read.php?tid=16199422&amp;rand=371" target="_blank" rel="noopener noreferrer">魔女的blog</a></li>
<li><a href="https://www.youtube.com/channel/UCpUXhakFVdqUvcuunBciaew" target="_blank" rel="noopener noreferrer">魔女日本麻将频道</a></li>
</ul>
<h2 id="日麻点数计算" tabindex="-1"> 日麻点数计算 <sup></sup></h2>
<h3 id="符的计算" tabindex="-1"> 符的计算</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/rbvbZx.jpg" alt="" loading="lazy"></p>
<p>基本符+和牌+听牌+雀头+面子（5个部分）</p>
<p><a href="https://lietxia.github.io/fupractice.html" target="_blank" rel="noopener noreferrer">算符练习网站</a></p>
<h3 id="得点计算" tabindex="-1"> 得点计算</h3>
<p>基本点：A=4×符数×2ⁿ</p>
<p>其中n为番数，基本点不为100的倍数时，舍去十位进百位。番数≥5番时基本点取固定值</p>
<p>5番满贯2000；6~7番跳满3000；8~10番倍满4000；11~12番三倍满6000；13番役满8000；n倍役满8000×n</p>
<p>(对基本点的取值为什么在5番以后取固定值的，可以了解一下青天井规则，青天井规则为只按这个公式来算，没有封顶，非常吓人)</p>
<p>得点：</p>
<ul>
<li>亲家荣和得点6A，自摸从子三家处各得2A点</li>
<li>子家荣和得点4A，自摸从亲家得点2A，从其他子家处各得A点</li>
</ul>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/J9B6ut.jpg" alt="" loading="lazy"></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/b9d4IC.jpg" alt="" loading="lazy"></p>
<h3 id="得点速算" tabindex="-1"> 得点速算</h3>
<h4 id="算点流程" tabindex="-1"> 算点流程</h4>
<ol>
<li>
<p>确定手牌番数，5番及以上则不需要计算(子家满贯8000，跳满12000，倍满16000，三倍满24000，庄家乘以1.5倍)</p>
</li>
<li>
<p>确定手牌是否特殊型(特殊型基本不需要计算)</p>
</li>
<li>
<p>计算符数</p>
</li>
<li>
<p>速算得点</p>
</li>
</ol>
<h4 id="速算方法" tabindex="-1"> 速算方法</h4>
<p>由于基本点舍十进百的影响，会与实际得点有300分以内的差距</p>
<p><strong>先记住1000分的基准</strong>，庄家的1000点基准是1番20符，子家是1番30符</p>
<p><strong>记住七对子nomi打点</strong>，子家2番25符1600点</p>
<p><strong>然后做加减法和2倍乘算</strong></p>
<p><strong>四番及以内，多一番则得点乘算一次2</strong></p>
<p>符数可以通过拆解来算得点</p>
<p>例如：一番50符，两个2番25符打点相加即2番50符打点，除以2为1番50符打点</p>
<p>一番50符：(1600+1600)÷2=1600</p>
<p>2番60符：子家(1000+1000)*2=4000</p>
<p>注:荣和实际得点为3900，自摸为4000</p>
<p>可以把符数除以2，每提一次2，看作多一番</p>
<p>2番80符=4番20符，若为庄家得点与子家4番30符相同</p>
<p>2番80符庄家荣和：2×2×2×1000=8000</p>
<p>注：实际上为7700，采用切上满贯规则为8000</p>
<p>实际上算点就是个<strong>指数相加减</strong>的问题</p>
<p>不过因为舍入的存在反而使得这速算与实际有偏差</p>
<p>如果想算得更快更准确可以通过记忆其他情形</p>
<p>例如40符4番、70符三番即满贯，不存在4000，只有3900，庄家下7700的牌打点变成11600等</p>
<h2 id="向听数、有效牌、五种听牌型" tabindex="-1"> 向听数、有效牌、五种听牌型 <sup></sup></h2>
<h3 id="一些术语" tabindex="-1"> 一些术语</h3>
<ul>
<li>向听数：再摸多少张牌就可以听牌</li>
<li>进张：可以让你向听数前进的</li>
<li>改良：不能使得向听数前进，但是可以使得进张数量增加</li>
<li>有效牌：进张+改良</li>
</ul>
<h3 id="听牌型" tabindex="-1"> 听牌型</h3>
<ul>
<li>两面听：78</li>
<li>双碰听：4499</li>
<li>嵌张听：46</li>
<li>边张听：12</li>
<li>单骑听：3（容易改良）</li>
</ul>
<h3 id="手牌书面表示法" tabindex="-1"> 手牌书面表示法</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/rLhMQT.jpg" alt="" loading="lazy"></p>
<ul>
<li>1-9m: 表示万子（9m表示9万）</li>
<li>1-9p: 表示饼子（7p表示7饼）</li>
<li>1-9s: 表示索子（9s表示9索）</li>
<li>0: 表示红宝牌（0m表示红5万，0p表示红5饼，0s表示红5索）</li>
<li>1-7z：表示字牌（东南西北白发中）</li>
</ul>
<p><a href="https://tenhou.net/2/?q=24569m36p3479s24z8m" target="_blank" rel="noopener noreferrer">https://tenhou.net/2/?q=24569m36p3479s24z8m</a></p>
<h3 id="单骑好型改良" tabindex="-1"> 单骑好型改良</h3>
<div><p>提示</p>
<p>单骑听好型改良很多，不需要急着立直！可以等转成复合好型以后再立。</p>
</div>
<p>中间顺子234 → 进1245</p>
<p>进2/4: 2234 → 2 234 | 22 34 → 听 2 2/5 （共6张）</p>
<p>进1/5: 2345 → 2 345 | 234 5 → 听 2 5 （共6张）</p>
<hr>
<p>两边顺子123 → 进14</p>
<p>进1: 1123 → 11 23 → 听 1/4 （共6张）</p>
<p>进4: 1234 → 1 234 | 123 | 4 → 听1/4（共6张）</p>
<hr>
<p>中间刻子 777 → 进 5689</p>
<p>进6/8: 6777 → 67 77 | 6 777 → 听5/8 6（共11张）</p>
<p>进5/9: 5777 → 57 77 | 5 777 → 听 6 5（共7张）</p>
<hr>
<p>两边刻子999 → 进 78</p>
<p>进8: 8999 → 89 99 | 8 999 → 听 7 8（共7张）</p>
<p>进7: 7999 → 79 99 | 7 999 → 听 8 7（共7张）</p>
<hr>
<p>通常摸到靠近现有面子的牌都可以改良成更好的牌型：</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/5xi665.jpg" alt="" loading="lazy"></p>
<h3 id="一些四张听牌型" tabindex="-1"> 一些四张听牌型</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/X652GR.jpg" alt="" loading="lazy"></p>
<h3 id="一些常见的三面听" tabindex="-1"> 一些常见的三面听</h3>
<p>中间五连型：34567 → 34 567 | 345 67 → 听2 5 8（共11张）</p>
<p>中间六连型345678的变种：</p>
<p>进边上的3/8: 3345678 → 33 45678 → 听3 6 9（共9张）</p>
<p>进中间的5/6: 3455678 → 345 5678 | 345 5 678 | 34 55 678 → 听2 5 8（共9张）</p>
<p>七连型：1234567 → 1 234 567 | 123 4 567 | 123 456 7 → 听1 4 7（共9张）</p>
<p>67888xx → 678 88 xx | 67 888 xx → 听 x 8 5（共7张）</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/YQ3adF.jpg" alt="" loading="lazy"></p>
<h3 id="毁天灭地五面听" tabindex="-1"> 毁天灭地五面听</h3>
<p>4445678 → 444 5678 | 44 45678 → 听 5 8 3 6 9（共15张）</p>
<p>2223444 → 222 3 444 | 22 234 44 | 22 23 444 | 222 34 44 → 听 1 2 3 4 5（共13张）</p>
<h2 id="对子复合型" tabindex="-1"> 对子复合型</h2>
<h3 id="如何处理对子复合型" tabindex="-1"> 如何处理对子复合型？</h3>
<ul>
<li>总共有两个对子：</li>
<li>一般会想把两个对子都留下</li>
<li>比较搭子的部位，拆掉最弱的搭子</li>
</ul>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/KgbaKH.jpg" alt="" loading="lazy"></p>
<ul>
<li>总共有三个对子：</li>
<li>一般会拆其中一对（三对拆一对）</li>
<li>比较搭子部位，拆掉最强搭子的对子</li>
<li>（把补强牌留给弱搭子）</li>
</ul>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/6nq7Y2.jpg" alt="" loading="lazy"></p>
<p>有三个对子，3m 7p 8s，其中88s不是搭子，拆掉会使得向听倒退，677p是好型两面搭子，但334567m是更强的搭子，因此这里要拆掉3m。</p>
<div><p>口诀</p>
<p>三对拆一对，拆最强的搭子</p>
</div>
<h2 id="攻防理论" tabindex="-1"> 攻防理论 <sup></sup></h2>
<h3 id="早巡外侧" tabindex="-1"> 早巡外侧</h3>
<p>早巡阶段打过的数牌，外侧的牌比较安全</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/DpkS4i.jpg" alt="" loading="lazy"></p>
<p>例如：早巡有人打过8m，那么就会认为9m比较安全</p>
<div><p>注意点</p>
<p>打过的数牌离听牌时的距离越远，该理论置信度越高。</p>
</div>
<h3 id="没安牌时" tabindex="-1"> 没安牌时</h3>
<p>早巡立直：</p>
<p>若点差不大，按照自己的手牌的速度选择策略：速度快可以考虑进攻，速度慢考虑弃和，优先打它风字牌或幺九牌（因为这些牌能组成的铳牌型较少）</p>
<h2 id="ai牌谱分析工具" tabindex="-1"> AI牌谱分析工具</h2>
<ul>
<li><a href="https://naga.dmv.nico/events/cho-mahjong/" target="_blank" rel="noopener noreferrer">naga牌谱分析</a> <i>Content not supported</i></li>
<li><a href="https://github.com/Equim-chan/mjai-reviewer" target="_blank" rel="noopener noreferrer">Akochan</a></li>
</ul>
<div><p>相关信息</p>
<p>Akochan 需要自己部署，不过也有一个在线的 <a href="https://mjai.ekyu.moe/" target="_blank" rel="noopener noreferrer">demo</a>，似乎现在不能分析雀魂的牌谱，只能分析天凤牌谱。</p>
</div>
<hr>
<section>
<ol>
<li id="footnote1"><p><a href="https://www.bilibili.com/read/cv6487873" target="_blank" rel="noopener noreferrer">立直麻将点数计算与速算</a> </p>
</li>
<li id="footnote2"><p><a href="https://space.bilibili.com/303003611/channel/seriesdetail?sid=591630" target="_blank" rel="noopener noreferrer">星野Poteto的日麻牌效率教程</a> </p>
</li>
<li id="footnote3"><p><a href="https://space.bilibili.com/303003611/channel/collectiondetail?sid=622719" target="_blank" rel="noopener noreferrer">星野Poteto的日麻防守教程</a> </p>
</li>
</ol>
</section>
]]></content:encoded>
      <enclosure url="http://timpcfan-site.cdn.bcebos.com/imgs/rbvbZx.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>俄罗斯方块｜Tetris</title>
      <link>https://timpcfan.site/life/game/tetris.html</link>
      <guid>https://timpcfan.site/life/game/tetris.html</guid>
      <source url="https://timpcfan.site/rss.xml">俄罗斯方块｜Tetris</source>
      <category>笔记</category>
      <pubDate>Sun, 02 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="tetris99-基础" tabindex="-1"> Tetris99 基础</h2>
<h3 id="键位" tabindex="-1"> 键位</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/KOuUXn.jpg" alt="" loading="lazy"></p>
<h3 id="对于不同的战术" tabindex="-1"> 对于不同的战术</h3>
<ul>
<li>向上：追击（收残血）</li>
<li>向下：反击（很多人狙击你的时候）</li>
<li>向右：瞄准徽章（肛大佬）</li>
<li>向左：随机（被很多徽章的人攻击，且徽章不够多，切换随机目标）</li>
</ul>
<h3 id="火力" tabindex="-1"> 火力</h3>
<h4 id="普通消除" tabindex="-1"> 普通消除</h4>
<ul>
<li>1行：0</li>
<li>2行：1</li>
<li>3行：2</li>
<li>4行：<strong>4</strong></li>
</ul>
<h4 id="tspin消除" tabindex="-1"> 消除</h4>
<ul>
<li>1行：2</li>
<li>2行：4</li>
<li>3行：6</li>
</ul>
<div><p>提示</p>
<p>Tspin消除2行的火力就等于普通消除4行。</p>
</div>
<h4 id="连消-ren-combo" tabindex="-1"> 连消（REN/Combo）</h4>
<ul>
<li>1~3：1</li>
<li>4~5：2</li>
<li>6~7：3</li>
<li>8~10：4</li>
<li>11以上：5</li>
</ul>
<h3 id="棋盘" tabindex="-1"> 棋盘</h3>
<ul>
<li>高20</li>
<li>宽10</li>
</ul>
<h3 id="死亡判定点" tabindex="-1"> 死亡判定点</h3>
<ul>
<li>中间4列的第21行</li>
</ul>
<h3 id="构筑的tips" tabindex="-1"> 构筑的tips</h3>
<ul>
<li>高低差不要超过3（否则要消耗一个I棒）</li>
<li>面对别人的送的坑：不要搭在空气上</li>
<li>面对自己的高低差：不要害怕搭出坑，平整第一</li>
<li>地形 &gt; 火力</li>
<li>要注意next</li>
<li>妥协消除</li>
</ul>
<h2 id="如何堆叠整齐" tabindex="-1"> 如何堆叠整齐</h2>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/s9yFBv.jpg" alt="" loading="lazy"></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/TfzumV.jpg" alt="" loading="lazy"></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/EylXyr.jpg" alt="" loading="lazy"></p>
<h2 id="tspin" tabindex="-1"> Tspin</h2>
<div><p>什么是Tspin？</p>
<p>Tspin又称T旋，是现代俄罗斯方块新加入的机制，具体的原理是「踢墙」机制，该机制可以使得方块卡入传统俄罗斯方块不能卡入的地方。由于Tspin机制的出现，现代俄罗斯方块趣味性增加了不少。</p>
</div>
<p>Tspin根据其消除的行数分为几类：</p>
<ul>
<li>Tspin mini：消除一行</li>
<li>Tspin single：消除一行</li>
<li>Tspin double：消除两行</li>
<li>Tspin triple：消除三行</li>
</ul>
<h3 id="tspin-double" tabindex="-1"> Tspin double</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/kNMH0B.jpg" alt="" height="150" loading="lazy"></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/w3hWsc.gif" alt="" loading="lazy"></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/5Jl0S9.gif" alt="" loading="lazy"></p>
<h3 id="tspin-triple-的例子" tabindex="-1"> Tspin triple 的例子</h3>
<p>初始Tspin triple</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/ALKlUk.jpg" alt="" loading="lazy"></p>
<p>Tspin triple捐赠</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/AVyIog.jpg" alt="" loading="lazy"></p>
<p>如何操作</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/DrAyHr.jpg" alt="" loading="lazy"></p>
<div><p>提示</p>
<p>就是要摆出一个F的形状！！！（没有格子的部分）</p>
</div>
<h2 id="tspin-捐赠模版" tabindex="-1"> Tspin 捐赠模版 <sup></sup></h2>
<h3 id="使用sz来连续搭t槽" tabindex="-1"> 使用SZ来连续搭T槽</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/RnDucI.jpg" alt="" loading="lazy"></p>
<p>当有两个高度差时，右边放一个Z，上面放一个S当屋顶</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/dOUTCw.png" alt="" loading="lazy"></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/34tSFV.gif" alt="" loading="lazy"></p>
<h3 id="楼梯捐赠" tabindex="-1"> 楼梯捐赠</h3>
<p>有4级阶梯的地形，搭一个Z就可以形成T槽</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/Fwlnm3.jpg" alt="" loading="lazy"></p>
<p>之后再搭个屋顶</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/cquWGH.jpg" alt="" loading="lazy"></p>
<div><p>好处都有啥？</p>
<p>既可以平整地形，也可以打出伤害</p>
</div>
<h3 id="stsd-super-t-spin-double" tabindex="-1"> STSD（Super T-Spin Double）</h3>
<p>有3格宽的空地</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/cQldFu.png" alt="" loading="lazy"></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/SiMiqH.gif" alt="" loading="lazy"></p>
<h3 id="stmb-cave-三宽捐赠" tabindex="-1"> STMB-cave（三宽捐赠）</h3>
<p>条件：左右高度相同，中间有三格空地</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/JDYdz9.jpg" alt="" loading="lazy"></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/pssJJS.png" alt="" loading="lazy"></p>
<p>已经有了T槽的地形，在盖屋顶时，如果两边等高可以考虑STMB来形成2连T槽</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/Tz2mD5.png" alt="" loading="lazy"></p>
<h2 id="zspin与sspin" tabindex="-1"> Zspin与Sspin</h2>
<h3 id="_1-无东西顶住" tabindex="-1"> 1 无东西顶住</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/GP5RlB.jpg" alt="" loading="lazy"></p>
<p>该位置逆时针旋转进入</p>
<h3 id="_2-有东西顶住" tabindex="-1"> 2 有东西顶住</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/AuX479.jpg" alt="" loading="lazy"></p>
<p>该位置顺时针旋转进入</p>
<h3 id="s块同理" tabindex="-1"> S块同理</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/oDNxDi.jpg" alt="" loading="lazy"></p>
<p>此情况逆时针进入</p>
<h2 id="c4w-s4w-连消" tabindex="-1"> C4W/S4W 连消</h2>
<h3 id="消除o" tabindex="-1"> 消除o</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/WdMjjg.jpg" alt="" loading="lazy"></p>
<p>1、将Z插下去，将O放右边，恢复原样</p>
<p>2、把J插进去，右边放O</p>
<p>3、把J插进去，右边放T，把O放中间</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/x7XVzC.jpg" alt="" loading="lazy"></p>
<p>4、把I插进去，右边放L或J，再放O</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/HNDp4Y.jpg" alt="" loading="lazy"></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/0a3m2W.jpg" alt="" loading="lazy"></p>
<p>这种地形，可以把L,Z,T放进去</p>
<h3 id="组合" tabindex="-1"> 组合</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/qTDBUC.jpg" alt="" loading="lazy"></p>
<p>J插进去，Sspin进去，L插进去，Zspin进去</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/eg23w3.jpg" alt="" loading="lazy"></p>
<p>J插进去，S直接竖着下来（不spin），Zspin进去</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/bGJsVT.jpg" alt="" loading="lazy"></p>
<div><p>提示</p>
<p>使用T方块的时候要注意下一个SZ方块是哪个（因为会改变朝向）</p>
</div>
<h2 id="t3塔" tabindex="-1"> T3塔</h2>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/sG3fT6.jpg" alt="" loading="lazy"></p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/K2iomi.jpg" alt="" loading="lazy"></p>
<h2 id="lst堆叠" tabindex="-1"> LST堆叠</h2>
<p><a href="https://www.bilibili.com/read/cv7946210" target="_blank" rel="noopener noreferrer">【FOUR翻译】LST堆叠（LST Stacking）</a></p>
<h2 id="开局定式" tabindex="-1"> 开局定式</h2>
<h3 id="开局tds定式" tabindex="-1"> 开局TDS定式</h3>
<p>如果I先来，一般都能搭出定式来</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/Y6mnoa.png" alt="" loading="lazy"></p>
<h3 id="开局tspin-triple" tabindex="-1"> 开局Tspin triple</h3>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/ALKlUk.jpg" alt="" loading="lazy"></p>
<hr>
<section>
<ol>
<li id="footnote1"><p><a href="https://www.bilibili.com/video/av81402631/?vd_source=944f74dda1952a351d159b78513214f7" target="_blank" rel="noopener noreferrer">【I凛】俄罗斯方块新手入门讲座 第四节 T-spin&quot;捐赠&quot;【中文字幕/Tetris99】</a> </p>
</li>
</ol>
</section>
]]></content:encoded>
      <enclosure url="http://timpcfan-site.cdn.bcebos.com/imgs/KOuUXn.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>2019/08/28 - 谈Costco进入中国市场</title>
      <link>https://timpcfan.site/note/2019-08-28-costco.html</link>
      <guid>https://timpcfan.site/note/2019-08-28-costco.html</guid>
      <source url="https://timpcfan.site/rss.xml">2019/08/28 - 谈Costco进入中国市场</source>
      <category>随笔</category>
      <pubDate>Wed, 28 Aug 2019 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p><img src="https://images.unsplash.com/photo-1601202148957-99d5310635d1?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2370&amp;q=80" alt="" loading="lazy"></p>
<p>吃完饭回来想看看新闻，看到Costco在中国大陆的第一家实体店在上海开了，开门半天就因为客流量太大而提前关门。之前我还没有听说过这个公司，经过一番搜索，我才知道这家公司的厉害之处：它作为一家零售公司，但又不同于其他的零售公司以追求毛利率来赚钱。Costco则把毛利率控制得很低，换句话说他们不通过毛利率来赚钱！</p>
<p>他们使用一种会员制体系，你必须是付费会员，你才能进入店里购物。每年缴纳一定的年费。通过低廉的价格吸引用户，再通过收取年费来获取利润。这就导致它们的商品的价格比其他商店中商品价格便宜了10%～20%。吸引了无数的顾客。</p>
<p>第一次了解到这种模式感觉挺新奇的，零售业还能这样做？这种模式使它们公司成为美国第三大，世界第九大零售商。并在2018年《财富》世界500强中排35位。</p>
<p>现在又开始发展中国的市场了，然而这种模式在中国能成功复制在美国加拿大成功的案例吗？我觉得要画个问号。才开门第一天，中国的消费者们就像去抢钱一样涌进Costco上海分店，挤满了人。由于会员费一定，商品价格优惠力度大，你买的越多，你省的就越多，就相当于你去超市购物不是为了买东西，而是为了赚钱。这10%～20%价格差是很可怕的。这一部分利润是商家放弃的利润，由于市场价是一定的，那么这部分利润肯定不会白白飞掉，这些钱不流到商家的手里也要流到别人的手里。我相信，之后淘宝上马上就会有Costco代购这种服务出现，因为价格差，很多人可以通过转卖商品当个中间商赚差价。</p>
<p>这样的话，就会导致Costco的很多消费者的购物动机并不是来消费满足自己的个人需要，而是来赚钱的，是来“淘金”的。我不知道我这样想对不对，但是确实有可能会这样，因为利润摆在那里，你不要自然会有人要。我现在就是算不清楚，销售的东西过多会不会对Costco产生什么负面影响？由于控制极低的毛利率，导致增加商品的销量，应该不能够大幅度提高商店的利润。那其他方面的费用，比如说：太大的客流带来的管理成本、不断进货换货的人工成本等等这些费用都会增加。</p>
<p>所以，如果是按我了解的情况一样的话，那Costco在中国可能不能走在美国加拿大那样的老路，要适应中国客流，和消费特点，走中国特色的道路（笑）</p>
<p>其实吧，我觉得问题也没我说的那么严重，有很多办法都可以改善状况，我都帮Costco想好了。不是说毛利率低吗？那我提高一点价格增加毛利率不就好了。再或者，为了防止代购，可以给每个用户每天设置限额之类的措施。</p>
<p>不清楚这种会员制零售业与中国会摩擦出什么样的火花，拭目以待，嘿嘿～</p>
]]></content:encoded>
      <enclosure url="https://images.unsplash.com/photo-1601202148957-99d5310635d1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2370&q=80" type="image/"/>
    </item>
    <item>
      <title>2019/12/25 - 记一年圣诞节</title>
      <link>https://timpcfan.site/note/2019-12-25-Xmas.html</link>
      <guid>https://timpcfan.site/note/2019-12-25-Xmas.html</guid>
      <source url="https://timpcfan.site/rss.xml">2019/12/25 - 记一年圣诞节</source>
      <category>随笔</category>
      <pubDate>Wed, 25 Dec 2019 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>早上起来居然收到了酒姬民（西田）私发的圣诞祝福，真的是意料之外。感觉我这几天拖着没看hh的视频真的是罪过。最近没看hh的视频其实原因挺复杂的。第一，我太喜欢她们了，觉得看她们的视频是一件很有仪式感的事情，总觉得现在不太适合看，于是就拖着了。第二，也许是因为我考完初试心情确实不太好，没心情看。emmmm，这应该是事实。感觉又想脱离社会那样。</p>
<p>跑回去刷了hh圣诞翻唱和琥珀的mv。<a href="https://www.bilibili.com/video/BV1WJ411x7M1" target="_blank" rel="noopener noreferrer">圣诞翻唱</a>确实有点唐老鸭声线hhhh，塑料英语太过明显了，翻唱的是一首前披头士主唱约翰·列侬的圣诞歌曲 Happy Xmas（War is over），列侬是披头士的创建者，是一个呼唤和平的斗士，却在40岁时被一个狂热歌迷给枪杀。。。。</p>
<p>果然工务店选择的翻唱歌曲都是很有意义的。不过hh唱的确实和原唱有点差距，主要是英语发音😂 。</p>
<p><a href="https://www.bilibili.com/video/BV1hJ411C7W8" target="_blank" rel="noopener noreferrer">「琥珀的身体」mv</a>看了，憋了好久总算还是看了，虽然之前没开声音看过一点片段，感觉后面伴舞的一群人有点尴尬。不过这次正式开声音看，就没有尴尬的感觉了。歌词还没有细看，不过有一句真的是触动我心灵了。</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/ottHcM.png" alt="" loading="lazy"></p>
<p>「呐，未来一定是美好的对吗？」</p>
<p>联想到我自己考研失利，对未来的不确定、迷茫、彷徨，深深的触动了我，未来一定是美好的对吗？我不禁流下眼泪，考完初试后，我已经没有勇气去思考自己的未来，未来会是怎么样的呢？不过，我还是把握当下好了。</p>
<p>不行了，觉得太伤感了就打开了hime的<a href="https://bilibili.com/video/BV1Qp411d7vM" target="_blank" rel="noopener noreferrer">echo</a>来听，然后写上面这段文字实在写不下去了😂</p>
<p>himehina真的是可以满足我的各种情感需求啊。考完初试后的憋屈一直没有地方排解，看了「琥珀」之后总算有能让我借之来抒发我的情感。需要一点伤感的情绪，就可以去看她们的mv，听她们的故事；需要正面的情绪就去看日常和游戏直播。总之，认识hh真是太好了。</p>
<p>「此生之幸，相见恨晚」</p>
]]></content:encoded>
      <enclosure url="http://timpcfan-site.cdn.bcebos.com/imgs/ottHcM.png" type="image/png"/>
    </item>
    <item>
      <title>2020/01/15 - 体验一元油画课</title>
      <link>https://timpcfan.site/note/2020-01-15-try_to_learn_painting.html</link>
      <guid>https://timpcfan.site/note/2020-01-15-try_to_learn_painting.html</guid>
      <source url="https://timpcfan.site/rss.xml">2020/01/15 - 体验一元油画课</source>
      <category>生活</category>
      <pubDate>Wed, 15 Jan 2020 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>今天和妹妹约好要去体验油画课，好像是姐姐之前给我们安利的，网上有很多一元体验课可以去参加，我们就想去试试。</p>
<p>匆忙吃完午饭，赶过去上油画课，妹妹提前到了挺久，我骑单车过去，跟着导航绕来绕去，还绕进了公园里。。好不容易才到了目的地附近，那边在修地铁施工，路况不是很好，找了好一会儿才找到。</p>
<p>接着就开始油画课了。</p>
<p>油画课还不错，跟我们一起体验油画的还有另一个女生，她比我们先到，看她在给天空上色，还挺好看的。</p>
<p>老师教完妹妹，又来给我指导，我选了一张蓝天配一个绿色的上坡的照片，很有windows xp桌面的感觉。首先是勾线，也就是粗粗地画一下大致的轮廓，之后就开始慢慢刷颜色了。油画跟水彩的差别就是用的全是油，混颜色用的是油，连洗笔用的也都是油，有松节油、调色油等等（查了一下百度，好像松节油不是油，然后松节油是调色油的一种）。</p>
<p>画油画还挺有趣的，不过还是要很有耐心，感觉最难的地方之一就是调颜色，想要把颜色调成想要的颜色真的不容易，因为没有像procreate里面给你的调色盘，在色环上面转一转就能得到想要的颜色。真正用颜色自己调色就基本上还是要靠蒙。。。知道绿色=蓝色+黄色，但是我想要的绿色是哪种黄色加哪种蓝色呢？它们的比例又应该是怎样的呢？都是需要通过不断尝试才能得出来的。</p>
<p>经过不懈努力加上老师的抢救，我的画的成品如下。</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/TuvqK7.jpeg" alt="" loading="lazy"></p>
<p>妹妹的画是这样的：</p>
<p><img src="http://timpcfan-site.cdn.bcebos.com/imgs/g0fScZ.jpeg" alt="" loading="lazy"></p>
<p>非常漂亮。</p>
<p>虽说这是1元体验课，但是可以加钱把画给带回家。有两种选择，一种是100元带走，另一种是180元再上一次课。我想选择前一种，然而妹妹选择了后一种，我就跟着她选了。等过年后再来上一次课也不错是吧。他们是2月1日开始营业，我们回家后也差不多能去一次。</p>
<p>晚上回家的途中，我们是手捧着画拿回家的，因为这画据说要三天才能干，所以，要小心翼翼地拿。很显然我没有小心翼翼地拿，导致画的一些地方被我莫名其妙地蹭掉了一点，有一处还比较严重，不过也无所谓了。最可气也是最搞笑的是，拿回家的途中，有一只小虫子粘到了我的画上。。。emmm</p>
<p>等干了再把它弄走吧，或者就让它在上面跟我的作品融为一体也不是不可以hhh</p>
]]></content:encoded>
      <enclosure url="http://timpcfan-site.cdn.bcebos.com/imgs/TuvqK7.jpeg" type="image/jpeg"/>
    </item>
  </channel>
</rss>